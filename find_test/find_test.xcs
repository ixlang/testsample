	//快速排序
void quickSort(@NotNilptr int[] a){
    quickSort(a, 0, a.length-1);
}

void quickSort(@NotNilptr int[] a, int left, int right){
    if(left < right){
        int index = getSortIndex(a, left, right);
        quickSort(a, left, index-1);
        quickSort(a, index+1, right);
    }
}

int getSortIndex(@NotNilptr int[] a, int left, int right){
    int temp = a[left];
    while(left<right){
        while(left < right && a[right]>=temp){
            right--;
        }
        a[left] = a[right];
        while(left < right && a[left] <= temp){
            left++;
        }
        a[right] = a[left];
    }
    a[left] = temp;
    return left;
}


int recursionBinarySearch(int[] arr,int key,int low,int high){
    
    if(key < arr[low] || key > arr[high] || low > high){
        return -1;				
    }
    
    int middle = (low + high) / 2;			//初始中间位置
    if(arr[middle] > key){
        return recursionBinarySearch(arr, key, low, middle - 1);
    }else if(arr[middle] < key){
        return recursionBinarySearch(arr, key, middle + 1, high);
    }else {
        return middle;
    }	
    
}



int main(String [] args){

    _system_.createConsole();
    
    int[] arr = new int[100];
    for (int i = 0; i < arr.length; i++){
        arr[i] = Math.random() * 15;
    }
    //二分查找要求有序
    quickSort(arr);
    
    
    int key = Math.random() * 15;  
      
    int position = 0;
    
    long start = _system_.currentTimeMillis();
    //10万次二分查找法
    for (int i =0; i < 100000; i++){
       position = recursionBinarySearch(arr, key, 0, arr.length - 1);  
    }  
    start = _system_.currentTimeMillis() - start;
    
    if(position == -1){  
        _system_.consoleWrite("key is "+key+", not found！ \ntime: " +start +"ms \n");  
    }else{  
        _system_.consoleWrite("key is " + key + ", pos is : " + position + "\ntime: " +start + "ms \n");  
    }  
    Thread.sleep(1000);
    return 0;
};