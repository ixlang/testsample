//xlang 

interface IClient{
    void add(long context, int a, int b);
};

interface IServer{
    bool sub(long context, String a, String b);
};

class Server : IServer{
	Unsi unsi = new Unsi();
    
	RemoteCallPipe<IServer, IClient> rcs = new RemoteCallPipe<IServer, IClient>();	
    
    IRCPEventHandler rcph = new IRCPEventHandler(){
    
		bool onNewInstance(long context, int type)override{
			_system_.consoleWrite("server new Instance\n");
			return true;
        }
		bool onDeleteInstance(long context)override{
			_system_.consoleWrite("server delete Instance\n");
			return true;
        }
        void onAccessFailed(long context)override{
        
        }
        bool onTimeout(long context)override{
			_system_.consoleWrite("server onTimeout\n");
			return true;
        }
    };
    
    public void create(){
		rcs.create(unsi.getAsyncDirectOutput(), rcph, this, true);
		unsi.create(rcs.getAsyncDirectInput(), 1, 13567, 0);
        unsi.start();
        rcs.startForServer();
    }
    
    void run(){
		
    }
    
    bool sub(long context, String a, String b)override{
		_system_.consoleWrite("server a = " + a + " b = " + b + "\n");
        
        rcs.add(context, 3, 5);
		return false;
    }
    
    void test(long context){

    }
};


class Client : IClient{
	RemoteCallPipe<IClient, IServer> rcs = new RemoteCallPipe<IClient, IServer>();	
    
    class XAsyncOutput : AsyncOutput{
		public StreamSocket _socket = new StreamSocket();
        
		public bool create(){
			return _socket.connect("127.0.0.1", 13567);
        }
        
        bool dataDeparture(AsyncInput input, long context, long bind, byte [] buffer ,int offset, int length){
			return (length == _socket.write(buffer, offset, length));
        }
        
        void deleteInstance(AsyncInput input, long context){
        
        }
        
        long newInstance(AsyncInput input, String ip, int port, long bind){
			return 0;
        }
        
        long getInstanceId(long context){
			return 0;
        }
        
        long cloneContext(long context){
			return 0;
        }
        
        void releaseContext(long context){
        
        }
    };
    
    XAsyncOutput ao = new XAsyncOutput();
    
    IRCPEventHandler rcph = new IRCPEventHandler(){
    
		bool onNewInstance(long context, int type)override{
			return true;
        }
		bool onDeleteInstance(long context)override{
			return true;
        }
        void onAccessFailed(long context)override{
        
        }
        bool onTimeout(long context)override{
			return true;
        }
    };
    
    public void create(){
		ao.create();
        loop();
		rcs.create(ao, rcph, this, false);
        rcs.startForClient(0, 5000);
    }
    
    public void run(){
		test();
    }
    void add(long context, int a, int b)override{
		_system_.consoleWrite("client a = " + a + "client b = " + b + "\n");
    }
    
    void test(){
		long f = _system_.currentTimeMillis();
        
		bool r = rcs.sub(0, "server ", " function ");
        
        f = _system_.currentTimeMillis() - f;
        
        _system_.consoleWrite("r = " + r + " time:" + f + "\n");
    }
    
    void loop(){
		new Thread(){
			void run()override{
				byte [] buffer = new byte[1024];
                int rd = 0;
                while ((rd = ao._socket.read(buffer, 0, 1024)) > 0){
					rcs.getAsyncDirectInput().dataArrives(ao, 0, buffer, 0, rd);
                }
            }
        }.start();
    }
};



int main(String [] args){
	_system_.createConsole();
    Server sv = new Server();
	sv.create();
    
    
	Client cp = new Client();
    cp.create();
    
    cp.run();
    
    Thread.sleep(-1);
	return 0;
}
