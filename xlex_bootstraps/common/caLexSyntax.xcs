//**********注意**********
//该源文件内容由cclexc生成 ,可以手动添加包含文件或者导入包, 代码部分由生成器自动产生,为避免出现不必要的麻烦,建议不要手动修改.
//design by calex

class caLexSyntax{ 

	 static const int ID_CC_K_SPACE = 14;
	 static const int ID_CC_K_IMPORT = 15;
	 static const int ID_CC_K_CDECL = 16;
	 static const int ID_CC_K_STDCALL = 17;
	 static const int ID_CC_K_FASTCALL = 18;
	 static const int ID_CC_K_PASCAL = 19;
	 static const int ID_CC_K_OPERATOR = 20;
	 static const int ID_CC_K_FOR = 21;
	 static const int ID_CC_K_WHILE = 22;
	 static const int ID_CC_K_DO = 23;
	 static const int ID_CC_K_TRY = 24;
	 static const int ID_CC_K_CATCH = 25;
	 static const int ID_CC_K_IF = 26;
	 static const int ID_CC_K_BREAK = 27;
	 static const int ID_CC_K_CONTINUE = 28;
	 static const int ID_CC_K_DEFAULT = 29;
	 static const int ID_CC_K_INTERFACE = 30;
	 static const int ID_CC_K_CLASS = 31;
	 static const int ID_CC_K_PACKAGE = 32;
	 static const int ID_CC_K_STATIC = 33;
	 static const int ID_CC_K_CONST = 34;
	 static const int ID_CC_K_THROW = 35;
	 static const int ID_CC_K_SWITCH = 36;
	 static const int ID_CC_K_CASE = 37;
	 static const int ID_CC_K_ELSE = 38;
	 static const int ID_CC_K_RETURN = 39;
	 static const int ID_CC_K_NEW = 40;
	 static const int ID_CC_K_INCLUDE = 41;
	 static const int ID_CC_K_USING = 42;
	 static const int ID_CC_K_REQUIRE = 43;
	 static const int ID_CC_K_FINALLY = 44;
	 static const int ID_CC_K_FINAL = 45;
	 static const int ID_CC_K_SYNCHRONIZED_READ = 46;
	 static const int ID_CC_K_SYNCHRONIZED_WRITE = 47;
	 static const int ID_CC_K_SYNCHRONIZED = 48;
	 static const int ID_CC_K_DECLARE = 49;
	 static const int ID_CC_HEX = 50;
	 static const int ID_CC_FLOAT = 51;
	 static const int ID_CC_LONGNUM = 52;
	 static const int ID_CC_INTNUM = 53;
	 static const int ID_CC_WORD = 54;
	 static const int ID_CC_COLON = 55;
	 static const int ID_CC_QM = 56;
	 static const int ID_CC_COMMENT = 57;
	 static const int ID_CC_COMPSET_OPS = 58;
	 static const int ID_CC_LOGICOR_OPS = 59;
	 static const int ID_CC_LOGICAND_OPS = 60;
	 static const int ID_CC_BITOR_OPS = 61;
	 static const int ID_CC_BITXOR_OPS = 62;
	 static const int ID_CC_BITAND_OPS = 63;
	 static const int ID_CC_EQUALS_OPS = 64;
	 static const int ID_CC_BITMOV_OPS = 65;
	 static const int ID_CC_MEQ = 66;
	 static const int ID_CC_LEQ = 67;
	 static const int ID_CC_LC = 68;
	 static const int ID_CC_RC = 69;
	 static const int ID_CC_SELF_OPS = 70;
	 static const int ID_CC_UNARY_OPS = 71;
	 static const int ID_CC_ADDSUB_OPS = 72;
	 static const int ID_CC_MULDIVMOD_OPS = 73;
	 static const int ID_CC_MOV = 74;
	 static const int ID_CC_DOT = 75;
	 static const int ID_CC_LB = 76;
	 static const int ID_CC_RB = 77;
	 static const int ID_CC_LL = 78;
	 static const int ID_CC_LR = 79;
	 static const int ID_CC_LS = 80;
	 static const int ID_CC_RS = 81;
	 static const int ID_CC_LE = 82;
	 static const int ID_CC_COMMA = 83;
	 static const int ID_CC_STRING = 84;
	 static const int ID_CC_CHARS = 85;
	 static const int ID_CC_COMPSET_SYMBOL = 86;
	 static const int ID_CC_COMPSET_OPERATION = 87;
	 static const int ID_CC_BINARY_EXPRESSION = 88;
	 static const int ID_CC_LOGICOR_SYMBOL = 89;
	 static const int ID_CC_LOGICOR_OPERATOR = 90;
	 static const int ID_CC_LOGICOR_OPERATION = 91;
	 static const int ID_CC_LOGICAND_SYMBOL = 92;
	 static const int ID_CC_LOGICAND_OPERATOR = 93;
	 static const int ID_CC_LOGICAND_OPERATION = 94;
	 static const int ID_CC_BITOR_SYMBOL = 95;
	 static const int ID_CC_BITOR_OPERATOR = 96;
	 static const int ID_CC_BITOR_OPERATION = 97;
	 static const int ID_CC_BITXOR_SYMBOL = 98;
	 static const int ID_CC_BITXOR_OPERATOR = 99;
	 static const int ID_CC_BITXOR_OPERATION = 100;
	 static const int ID_CC_BITAND_SYMBOL = 101;
	 static const int ID_CC_BITAND_OPERATOR = 102;
	 static const int ID_CC_BITAND_OPERATION = 103;
	 static const int ID_CC_EQUALS_SYMBOL = 104;
	 static const int ID_CC_EQUALS_OPERATOR = 105;
	 static const int ID_CC_EQUALS_OPERATION = 106;
	 static const int ID_CC_COMPARE_SYMBOL = 107;
	 static const int ID_CC_COMPARE_OPERATOR = 108;
	 static const int ID_CC_COMPARE_OPERATION = 109;
	 static const int ID_CC_BITMOV_SYMBOL = 110;
	 static const int ID_CC_BITMOV_OPERATOR = 111;
	 static const int ID_CC_BITMOV_OPERATION = 112;
	 static const int ID_CC_ADDSUB_SYMBOL = 113;
	 static const int ID_CC_ADDSUB_OPERATOR = 114;
	 static const int ID_CC_ADDSUB_OPERATION = 115;
	 static const int ID_CC_MULDIVMOD_SYMBOL = 116;
	 static const int ID_CC_MULDIVMOD_OPERATOR = 117;
	 static const int ID_CC_MULDIVMOD_OPERATION = 118;
	 static const int ID_CC_UNARY_SYMBOL = 119;
	 static const int ID_CC_UNARY_OPERATOR = 120;
	 static const int ID_CC_UNARY_OPERATION = 121;
	 static const int ID_CC_CONST_OBJECT = 122;
	 static const int ID_CC_WORD_EXP = 123;
	 static const int ID_CC_META_OBJECT = 124;
	 static const int ID_CC_STATIC_OWNNER = 125;
	 static const int ID_CC_STATIC_ELEMENT = 126;
	 static const int ID_CC_TEMPLATE_OBJECT = 127;
	 static const int ID_CC_NEW_EXPRESSION = 128;
	 static const int ID_CC_ARRAY_TYPE = 129;
	 static const int ID_CC_NEW_ARRAY = 130;
	 static const int ID_CC_NEWARRAY_EXPRESSION = 131;
	 static const int ID_CC_DYNAMIC_OWNNER = 132;
	 static const int ID_CC_DYNAMIC_ELEMENT = 133;
	 static const int ID_CC_CALL_EXPRESSION = 134;
	 static const int ID_CC_STATIC_TYPE = 135;
	 static const int ID_CC_OBJECT_BLOCK = 136;
	 static const int ID_CC_CAST_OBJECT = 137;
	 static const int ID_CC_RETURN_EXPRESSION = 138;
	 static const int ID_CC_THROW_EXPRESSION = 139;
	 static const int ID_CC_NORMAL_EXPRESSION = 140;
	 static const int ID_CC_NORMAL_OBJECT = 141;
	 static const int ID_CC_MATH_OBJECT = 142;
	 static const int ID_CC_OBJECT = 143;
	 static const int ID_CC_TEMPORARY_CLASS = 144;
	 static const int ID_CC_ARRAY = 145;
	 static const int ID_CC_TEMPLATE_PARAMS = 146;
	 static const int ID_CC_INIT_LIST = 147;
	 static const int ID_CC_SYNCHRONIZED_EXPRESSION = 148;
	 static const int ID_CC_IF_EXPRESSION = 149;
	 static const int ID_CC_FOR_FIRST_EXPRESSION = 150;
	 static const int ID_CC_FOR_LAST_EXPRESSION = 151;
	 static const int ID_CC_FOR_IN_EXPRESSION = 152;
	 static const int ID_CC_FOR_EXPRESSION = 153;
	 static const int ID_CC_WHILE_EXPRESSION = 154;
	 static const int ID_CC_DOWHILE_EXPRESSION = 155;
	 static const int ID_CC_CASE_EXPRESSION = 156;
	 static const int ID_CC_SWITCH_EXPRESSION = 157;
	 static const int ID_CC_CATCH_BODY = 158;
	 static const int ID_CC_EXCEPTION_EXPRESSION = 159;
	 static const int ID_CC_STATEMENT = 160;
	 static const int ID_CC_STATEMENTS = 161;
	 static const int ID_CC_VARIABLE_INIT = 162;
	 static const int ID_CC_VARIABLE_DEF = 163;
	 static const int ID_CC_DEF_VARIABLE_STATE = 164;
	 static const int ID_CC_PARAMS_DEF = 165;
	 static const int ID_CC_NATIVEPARAMS_DEF = 166;
	 static const int ID_CC_FILEARRAY = 167;
	 static const int ID_CC_REQUIRE = 168;
	 static const int ID_CC_INCLUDE = 169;
	 static const int ID_CC_PACKAGE_NAME = 170;
	 static const int ID_CC_PACKAGE_ARRAY = 171;
	 static const int ID_CC_USING = 172;
	 static const int ID_CC_FUNCTION = 173;
	 static const int ID_CC_FUNCTION_CTOR = 174;
	 static const int ID_CC_FUNCTION_CTOR_DECLARE = 175;
	 static const int ID_CC_OPERATOR = 176;
	 static const int ID_CC_DISPATCH = 177;
	 static const int ID_CC_BASECLASS = 178;
	 static const int ID_CC_NATIVEFUNCTION_DEF = 179;
	 static const int ID_CC_NATIVE_IMPORT_BODY = 180;
	 static const int ID_CC_NATIVE_IMPORT = 181;
	 static const int ID_CC_CLASS_BODY = 182;
	 static const int ID_CC_CLASS = 183;
	 static const int ID_CC_BASEINTERFACE = 184;
	 static const int ID_CC_FUNCTION_DECLARE = 185;
	 static const int ID_CC_OPERATOR_DECLARE = 186;
	 static const int ID_CC_INTERFACE_DISPATCH = 187;
	 static const int ID_CC_INTERFACE_BODY = 188;
	 static const int ID_CC_INTERFACE = 189;
	 static const int ID_CC_PACKAGE_BODY = 190;
	 static const int ID_CC_PACKAGE = 191;
	 static const int ID_CC_DECLARE = 192;
	 static const int ID_CC_GLOBAL = 193;
	 static const int ID_CC_SCAN = 194;

	 static const int PROPERTY_SIZE = 4;
	 static const int TOKEN_STACK_SIZE = 360;
	caLexSyntax(){
		errToken.setError(); 
	}
	 static class CCContext{
		 int reduced = 0;
			int pos;
		
		 CCContext(int p){
			pos = p;
		}
	};


	 static class CCSource{
		 byte [] source;
		 int sourcepos;
		 int sourceline;
		 int sourcerow;

		 int sourceid;
		 char get(int i){
			if (i < source.length){
				return source[i];
			}
			return 0;
		}
		void updatesource(int size){
			int destsize = sourcepos + size;
			while (sourcepos < destsize){
				if (source[sourcepos] == '\n'){
					sourceline++;
					sourcerow = 0;
				} else{
					sourcerow++;
				}
				sourcepos++;
			}
		}
	};

	 static class TOKEN{
		 byte [] text;
		 int pos;
		 int length;
		 int tokenlength;
		 int start_line;
		 int start_row;
		 int end_line;
		 int end_row;
		 int type;
		 long[] lock = new long[PROPERTY_SIZE];
		 long[] property = new long[PROPERTY_SIZE];
		 long[] route = new long[PROPERTY_SIZE];
		 Object astobj;

		 bool checkid(int st){
			int c = st >> 6;
			return 0 != (property[c] & ((long)1 << (st & 0x3f)));
		}

		 bool lockfunction(int st){
			int id = st >> 6;
			if (((lock[id] & ((long)1 << (st & 0x3f))) != 0)){
				return false;
			}
			if (((route[id] & ((long)1 << (st & 0x3f))) != 0)){
				return false;
			}
			lock[id] |= ((long)1 << (st & 0x3f));
			route[id] |= ((long)1 << (st & 0x3f));
			return true;
		}

		void resetroute(){
			memset(route, 0);
		}

		void setError(){
			memset(route, 0xff);
			memset(lock, 0xff);
		}
		void unlockfunction(int st){
			int id = st >> 6;
			lock[id] &= ~((long)1 << (st & 0x3f));
		}

		void setProperty(int st){
			int c = st >> 6;
			property[c] |= ((long)1 << (st & 0x3f));
		}
	};

	 TOKEN [] tokens = new TOKEN[TOKEN_STACK_SIZE];
	 CCSource currentsrc;
	int errsrc = 0, weight = 0, errline = 0, errrow = 0, expectrammar = 0, errgrammar = 0;
	 interface OnParseListener{
		 Object OnReduction(TOKEN[] tokens, int pos, int len, int grammar);
		 void OnLexError(CCSource source);
		 bool OnLex(CCSource source, int length, int grammar);
		 void OnParseError(CCSource source);
		 void onSyntaxStackOverflow(CCSource source);
	};
	
	
	OnParseListener _listener;
	bool bStop = false;
	TOKEN errToken = new TOKEN();
	
	void setOnParseListener(OnParseListener l){
		_listener = l;
	}
	TOKEN generateToken(){
		TOKEN  object = new TOKEN();
		int res = 0;
		CCSource src = currentsrc;
		do{
			if (0 <= (res = cclex(src.sourcepos, object))){
				if (_listener == nilptr || _listener.OnLex(src, res, object.type)){
					break;
				} else
				if (res > 0){
					src.updatesource(res);
				} else{
					break;
				} 
			}else{
				bStop = true;
				return nilptr;
			}
		} while (true);
		object.length = res;
		object.tokenlength = 1;
		object.text = src.source;
		object.pos = src.sourcepos;
		object.start_line = src.sourceline;
		object.start_row = src.sourcerow;
		src.updatesource(res);
		object.end_line = src.sourceline;
		object.end_row = src.sourcerow;
		object.setProperty(object.type);
		return object;
	}

	 static void memset(long [] obj, long v){
		for (int i = 0; i < obj.length; i ++){
			obj[i] = v;
		}
	}
	 static int memcmp(byte [] text, int pos, byte []  str){
		if (text.length - pos < str.length){
			return 1;
		}
		for (int i = 0; i < str.length; i ++){
			if (text[pos + i] != str[i]){
				return 1;
			}
		}
		return 0;
	}
	TOKEN lexget(int pos){
			if(pos >= TOKEN_STACK_SIZE){
				if (bStop == false){
					bStop = true;
					_listener.onSyntaxStackOverflow(currentsrc);
					return errToken;
				}
			}
			if (bStop){
				return errToken;
			}
			if (tokens[pos] == nilptr){
					if (nilptr == (tokens[pos] = generateToken())){ return errToken; }
			}
			return tokens[pos];
	}
	void reset(){
		if (_listener != nilptr){
			for (int i =0; i <TOKEN_STACK_SIZE; i++){
				tokens[i] = nilptr;
			}
		}
		bStop = false;
		errsrc = weight = errline = errrow = errgrammar = expectrammar = 0;
		currentsrc = nilptr;
		_listener = nilptr;
	}
	 void setCurrentSource(CCSource s){
		currentsrc = s;
	}
	 int getProblemSourceId(){
		return errsrc;
	}
	
	 int getProblemLine(){
		return errline;
	}
	
	 int getProblemRow(){
		return errrow;
	}
	
	 int getProblemGrammar(){
		return errgrammar;
	}
	
	 int getExpectGrammar(){
		return expectrammar;
	}

	 TOKEN getResult(){
		return tokens[0];
	}
	
	 Object getAstResult(){
		if (tokens[0] != nilptr){
			return tokens[0].astobj;
		}
		return nilptr;
	}

	void setRecord(int ret, int pos,int ep,int eg){
		if (weight == 0 && pos > ret){
			weight = pos - ret;
			errsrc = currentsrc.sourceid;
			errline = tokens[pos].start_line;
			errrow = tokens[pos].start_row;
			errgrammar = ep;
			expectrammar = eg;
		}
	}
	 CCSource getCurrentSource(){
		return currentsrc;
	}
	int ccparseout(int pos,CCContext _context, int len, int id){
		if ((tokens[pos].tokenlength == len) && ((tokens[pos].property[id >> 6] & ((long)1 << (id & 0x3f))) != 0)){
			return 0;
		}
	
		weight = 0;
		tokens[pos].astobj = _listener.OnReduction(tokens, pos, len, id);
	
		
		if (len > 1){
			tokens[pos].length = (tokens[pos + len - 1].pos + tokens[pos + len - 1].length - tokens[pos].pos);
			memset(tokens[pos].lock, 0);
			memset(tokens[pos].route, 0);
			tokens[pos].tokenlength = 1;
			memset(tokens[pos].property, 0);
			tokens[pos].property[id >> 6] |= ((long)1 << (id & 0x3f));
	
			int src = pos + 1;
			int dst = pos + len;
	
			while (true){
				bool comp = false;
				if (false == (src < pos + len)){
					comp = true;
				}
				if (dst < TOKEN_STACK_SIZE && (tokens[dst] != nilptr)){
					tokens[src] = tokens[dst];
					tokens[dst] = nilptr;
				} else
				if (false == comp){
					tokens[src] = nilptr;
				} else{
					break;
				}
				src++;
				dst++;
			}
			_context.pos -= (len - 1);
			return 1;
		}
		memset(tokens[pos].lock, 0);
		memset(tokens[pos].route, 0);
	
		if (len > tokens[pos].tokenlength){
			tokens[pos].tokenlength = len;
			memset(tokens[pos].property, 0);
		}
		for (int i = 0; i < len; i++){
			tokens[pos + i].property[id >> 6] |= ((long)1 << (id & 0x3f));
		}
		return 1;
	}
	

//	dig	
	 int CC_DIG(int pos){
		int ret = pos, res = 0;
		
		int stack_1 = pos;
		if (currentsrc.get(pos) >= 48 && currentsrc.get(pos) <= 57){
			res = 0; pos ++;
		}else{
			res = -1;
		}
		if (res < 0){ pos = stack_1; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	number	
	 int CC_NUMBER(int pos){
		int ret = pos, res = 0;
		
		int stack_3 = pos;
		res = CC_DIG(pos);
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_3; }
		if (res >= 0){ 
			int stack_5 = pos;
			res = CC_NUMBER(pos);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_5; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				res = 0;
			}
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	blank	
	 int CC_BLANK(int pos){
		int ret = pos, res = 0;
		
		int stack_8 = pos;
		if (currentsrc.get(pos) >= 1 && currentsrc.get(pos) <= 32){
			res = 0; pos ++;
		}else{
			res = -1;
		}
		if (res < 0){ pos = stack_8; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	space	
	 int CC_SPACE(int pos){
		int ret = pos, res = 0;
		
		int stack_10 = pos;
		res = CC_BLANK(pos);
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_10; }
		if (res >= 0){ 
			int stack_12 = pos;
			res = CC_SPACE(pos);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_12; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				res = 0;
			}
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	ch	
	 int CC_CH(int pos){
		int ret = pos, res = 0;
		
		int stack_15 = pos;
		if (currentsrc.get(pos) >= 65 && currentsrc.get(pos) <= 90){
			res = 0; pos ++;
		}else{
			res = -1;
		}
		if (res < 0){ pos = stack_15; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_16 = pos;
			if (currentsrc.get(pos) >= 97 && currentsrc.get(pos) <= 122){
				res = 0; pos ++;
			}else{
				res = -1;
			}
			if (res < 0){ pos = stack_16; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_17 = pos;
				if (currentsrc.get(pos) == 95){ res = 0; pos++; } else { res = -1; }
				if (res < 0){ pos = stack_17; }
			}
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	equ	
	 int CC_EQU(int pos){
		int ret = pos, res = 0;
		
		int stack_19 = pos;
		if (currentsrc.get(pos) == 61){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_19; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	hch	
	 int CC_HCH(int pos){
		int ret = pos, res = 0;
		
		int stack_21 = pos;
		if (currentsrc.get(pos) >= 65 && currentsrc.get(pos) <= 70){
			res = 0; pos ++;
		}else{
			res = -1;
		}
		if (res < 0){ pos = stack_21; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_22 = pos;
			if (currentsrc.get(pos) >= 97 && currentsrc.get(pos) <= 102){
				res = 0; pos ++;
			}else{
				res = -1;
			}
			if (res < 0){ pos = stack_22; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_23 = pos;
				res = CC_DIG(pos);
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_23; }
			}
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	hexc	
	 int CC_HEXC(int pos){
		int ret = pos, res = 0;
		
		int stack_25 = pos;
		res = CC_HCH(pos);
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_25; }
		if (res >= 0){ 
			int stack_27 = pos;
			res = CC_HEXC(pos);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_27; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				res = 0;
			}
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	char	
	 int CC_CHAR(int pos){
		int ret = pos, res = 0;
		
		int stack_30 = pos;
		res = CC_CH(pos);
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_30; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_31 = pos;
			res = CC_DIG(pos);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_31; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	postfix	
	 int CC_POSTFIX(int pos){
		int ret = pos, res = 0;
		
		int stack_33 = pos;
		int stack_34 = pos;
		res = CC_CHAR(pos);
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_34; }
		if (res >= 0){ 
			int stack_36 = pos;
			res = CC_POSTFIX(pos);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_36; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				res = 0;
			}
		}
		if (res < 0){ pos = stack_33; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			res = 0;
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	wd	
	 int CC_WD(int pos){
		int ret = pos, res = 0;
		
		int stack_40 = pos;
		res = CC_CH(pos);
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_40; }
		if (res >= 0){ 
			int stack_42 = pos;
			res = CC_POSTFIX(pos);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_42; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	strcont	
	 int CC_STRCONT(int pos){
		int ret = pos, res = 0;
		
		int stack_44 = pos;
		if (memcmp(currentsrc.source, pos , "\\".getBytes()) == 0){ res = 0; pos += 1; } else { res = -1; }
		if (res >= 0){ 
			if (currentsrc.source.length > (pos + 1)){pos++;}else{res = -1;}
		}
		if (res < 0){ pos = stack_44; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_46 = pos;
			int stack_47 = pos;
			if (currentsrc.get(pos) == 34){ res = 0; pos++; } else { res = -1; }
			res = ((res == -1) ? 0 : -1);
			if (res < 0){ pos = stack_47; }
			if (res >= 0){ 
				if (currentsrc.source.length > (pos + 1)){pos++;}else{res = -1;}
			}
			if (res < 0){ pos = stack_46; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	charscont	
	 int CC_CHARSCONT(int pos){
		int ret = pos, res = 0;
		
		int stack_50 = pos;
		if (memcmp(currentsrc.source, pos , "\\".getBytes()) == 0){ res = 0; pos += 1; } else { res = -1; }
		if (res >= 0){ 
			if (currentsrc.source.length > (pos + 1)){pos++;}else{res = -1;}
		}
		if (res < 0){ pos = stack_50; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_52 = pos;
			int stack_53 = pos;
			if (currentsrc.get(pos) == '\''){ res = 0; pos++; } else { res = -1; }
			res = ((res == -1) ? 0 : -1);
			if (res < 0){ pos = stack_53; }
			if (res >= 0){ 
				if (currentsrc.source.length > (pos + 1)){pos++;}else{res = -1;}
			}
			if (res < 0){ pos = stack_52; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_space	
	 int CC_K_SPACE(int pos){
		int ret = pos, res = 0;
		
		int stack_56 = pos;
		res = CC_SPACE(pos);
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_56; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_import	
	 int CC_K_IMPORT(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "import".getBytes()) == 0){ res = 0; pos += 6; } else { res = -1; }
		if (res >= 0){ 
			int stack_59 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_59; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_cdecl	
	 int CC_K_CDECL(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "cdecl".getBytes()) == 0){ res = 0; pos += 5; } else { res = -1; }
		if (res >= 0){ 
			int stack_62 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_62; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_stdcall	
	 int CC_K_STDCALL(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "stdcall".getBytes()) == 0){ res = 0; pos += 7; } else { res = -1; }
		if (res >= 0){ 
			int stack_65 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_65; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_fastcall	
	 int CC_K_FASTCALL(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "fastcall".getBytes()) == 0){ res = 0; pos += 8; } else { res = -1; }
		if (res >= 0){ 
			int stack_68 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_68; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_pascal	
	 int CC_K_PASCAL(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "pascal".getBytes()) == 0){ res = 0; pos += 6; } else { res = -1; }
		if (res >= 0){ 
			int stack_71 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_71; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_operator	
	 int CC_K_OPERATOR(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "operator".getBytes()) == 0){ res = 0; pos += 8; } else { res = -1; }
		if (res >= 0){ 
			int stack_74 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_74; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_for	
	 int CC_K_FOR(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "for".getBytes()) == 0){ res = 0; pos += 3; } else { res = -1; }
		if (res >= 0){ 
			int stack_77 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_77; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_while	
	 int CC_K_WHILE(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "while".getBytes()) == 0){ res = 0; pos += 5; } else { res = -1; }
		if (res >= 0){ 
			int stack_80 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_80; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_do	
	 int CC_K_DO(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "do".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
		if (res >= 0){ 
			int stack_83 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_83; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_try	
	 int CC_K_TRY(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "try".getBytes()) == 0){ res = 0; pos += 3; } else { res = -1; }
		if (res >= 0){ 
			int stack_86 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_86; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_catch	
	 int CC_K_CATCH(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "catch".getBytes()) == 0){ res = 0; pos += 5; } else { res = -1; }
		if (res >= 0){ 
			int stack_89 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_89; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_if	
	 int CC_K_IF(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "if".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
		if (res >= 0){ 
			int stack_92 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_92; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_break	
	 int CC_K_BREAK(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "break".getBytes()) == 0){ res = 0; pos += 5; } else { res = -1; }
		if (res >= 0){ 
			int stack_95 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_95; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_continue	
	 int CC_K_CONTINUE(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "continue".getBytes()) == 0){ res = 0; pos += 8; } else { res = -1; }
		if (res >= 0){ 
			int stack_98 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_98; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_default	
	 int CC_K_DEFAULT(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "default".getBytes()) == 0){ res = 0; pos += 7; } else { res = -1; }
		if (res >= 0){ 
			int stack_101 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_101; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_interface	
	 int CC_K_INTERFACE(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "interface".getBytes()) == 0){ res = 0; pos += 9; } else { res = -1; }
		if (res >= 0){ 
			int stack_104 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_104; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_class	
	 int CC_K_CLASS(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "class".getBytes()) == 0){ res = 0; pos += 5; } else { res = -1; }
		if (res >= 0){ 
			int stack_107 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_107; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_package	
	 int CC_K_PACKAGE(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "package".getBytes()) == 0){ res = 0; pos += 7; } else { res = -1; }
		if (res >= 0){ 
			int stack_110 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_110; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_static	
	 int CC_K_STATIC(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "static".getBytes()) == 0){ res = 0; pos += 6; } else { res = -1; }
		if (res >= 0){ 
			int stack_113 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_113; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_const	
	 int CC_K_CONST(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "const".getBytes()) == 0){ res = 0; pos += 5; } else { res = -1; }
		if (res >= 0){ 
			int stack_116 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_116; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_throw	
	 int CC_K_THROW(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "throw".getBytes()) == 0){ res = 0; pos += 5; } else { res = -1; }
		if (res >= 0){ 
			int stack_119 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_119; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_switch	
	 int CC_K_SWITCH(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "switch".getBytes()) == 0){ res = 0; pos += 6; } else { res = -1; }
		if (res >= 0){ 
			int stack_122 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_122; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_case	
	 int CC_K_CASE(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "case".getBytes()) == 0){ res = 0; pos += 4; } else { res = -1; }
		if (res >= 0){ 
			int stack_125 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_125; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_else	
	 int CC_K_ELSE(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "else".getBytes()) == 0){ res = 0; pos += 4; } else { res = -1; }
		if (res >= 0){ 
			int stack_128 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_128; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_return	
	 int CC_K_RETURN(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "return".getBytes()) == 0){ res = 0; pos += 6; } else { res = -1; }
		if (res >= 0){ 
			int stack_131 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_131; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_new	
	 int CC_K_NEW(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "new".getBytes()) == 0){ res = 0; pos += 3; } else { res = -1; }
		if (res >= 0){ 
			int stack_134 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_134; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_include	
	 int CC_K_INCLUDE(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "include".getBytes()) == 0){ res = 0; pos += 7; } else { res = -1; }
		if (res >= 0){ 
			int stack_137 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_137; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_using	
	 int CC_K_USING(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "using".getBytes()) == 0){ res = 0; pos += 5; } else { res = -1; }
		if (res >= 0){ 
			int stack_140 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_140; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_require	
	 int CC_K_REQUIRE(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "require".getBytes()) == 0){ res = 0; pos += 7; } else { res = -1; }
		if (res >= 0){ 
			int stack_143 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_143; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_finally	
	 int CC_K_FINALLY(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "finally".getBytes()) == 0){ res = 0; pos += 7; } else { res = -1; }
		if (res >= 0){ 
			int stack_146 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_146; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_final	
	 int CC_K_FINAL(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "final".getBytes()) == 0){ res = 0; pos += 5; } else { res = -1; }
		if (res >= 0){ 
			int stack_149 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_149; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_synchronized_read	
	 int CC_K_SYNCHRONIZED_READ(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "synchronized_read".getBytes()) == 0){ res = 0; pos += 17; } else { res = -1; }
		if (res >= 0){ 
			int stack_152 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_152; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_synchronized_write	
	 int CC_K_SYNCHRONIZED_WRITE(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "synchronized_write".getBytes()) == 0){ res = 0; pos += 18; } else { res = -1; }
		if (res >= 0){ 
			int stack_155 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_155; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_synchronized	
	 int CC_K_SYNCHRONIZED(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "synchronized".getBytes()) == 0){ res = 0; pos += 12; } else { res = -1; }
		if (res >= 0){ 
			int stack_158 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_158; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	k_declare	
	 int CC_K_DECLARE(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "@Declare".getBytes()) == 0){ res = 0; pos += 8; } else { res = -1; }
		if (res >= 0){ 
			int stack_161 = pos;
			res = ((CC_CHAR(pos) == -1) ? 0 : -1);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_161; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	hex	
	 int CC_HEX(int pos){
		int ret = pos, res = 0;
		
		if (memcmp(currentsrc.source, pos , "0x".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
		if (res >= 0){ 
			int stack_164 = pos;
			res = CC_HEXC(pos);
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_164; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	float	
	 int CC_FLOAT(int pos){
		int ret = pos, res = 0;
		
		int stack_166 = pos;
		res = CC_NUMBER(pos);
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res >= 0){ 
			int stack_168 = pos;
			if (currentsrc.get(pos) == 46){ res = 0; pos++; } else { res = -1; }
			if (res < 0){ pos = stack_168; }
			if (res >= 0){ 
				int stack_170 = pos;
				res = CC_NUMBER(pos);
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_170; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					res = 0;
				}
				if (res >= 0){ 
					int stack_173 = pos;
					if (currentsrc.get(pos) == 102){ res = 0; pos++; } else { res = -1; }
					if (res < 0){ pos = stack_173; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						int stack_174 = pos;
						if (currentsrc.get(pos) == 70){ res = 0; pos++; } else { res = -1; }
						if (res < 0){ pos = stack_174; }
					}
				}
			}
		}
		if (res < 0){ pos = stack_166; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_175 = pos;
			int stack_176 = pos;
			if (currentsrc.get(pos) == 46){ res = 0; pos++; } else { res = -1; }
			if (res < 0){ pos = stack_176; }
			if (res >= 0){ 
				int stack_178 = pos;
				res = CC_NUMBER(pos);
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_178; }
				if (res >= 0){ 
					int stack_180 = pos;
					if (currentsrc.get(pos) == 102){ res = 0; pos++; } else { res = -1; }
					if (res < 0){ pos = stack_180; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						int stack_181 = pos;
						if (currentsrc.get(pos) == 70){ res = 0; pos++; } else { res = -1; }
						if (res < 0){ pos = stack_181; }
					}
				}
			}
			if (res < 0){ pos = stack_175; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_182 = pos;
				res = CC_NUMBER(pos);
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res >= 0){ 
					int stack_184 = pos;
					if (currentsrc.get(pos) == 46){ res = 0; pos++; } else { res = -1; }
					if (res < 0){ pos = stack_184; }
					if (res >= 0){ 
						res = CC_NUMBER(pos);
						if (res >= 0){
							pos += res;
							res = 0;
						}
					}
				}
				if (res < 0){ pos = stack_182; }
			}
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	longnum	
	 int CC_LONGNUM(int pos){
		int ret = pos, res = 0;
		
		int stack_187 = pos;
		res = CC_NUMBER(pos);
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_187; }
		if (res >= 0){ 
			int stack_189 = pos;
			if (currentsrc.get(pos) == 108){ res = 0; pos++; } else { res = -1; }
			if (res < 0){ pos = stack_189; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_190 = pos;
				if (currentsrc.get(pos) == 76){ res = 0; pos++; } else { res = -1; }
				if (res < 0){ pos = stack_190; }
			}
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	intnum	
	 int CC_INTNUM(int pos){
		int ret = pos, res = 0;
		
		int stack_192 = pos;
		res = CC_NUMBER(pos);
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_192; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	word	
	 int CC_WORD(int pos){
		int ret = pos, res = 0;
		
		int stack_194 = pos;
		res = CC_WD(pos);
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_194; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	colon	
	 int CC_COLON(int pos){
		int ret = pos, res = 0;
		
		int stack_196 = pos;
		if (currentsrc.get(pos) == 58){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_196; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	qm	
	 int CC_QM(int pos){
		int ret = pos, res = 0;
		
		int stack_198 = pos;
		if (currentsrc.get(pos) == 63){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_198; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	comment	
	 int CC_COMMENT(int pos){
		int ret = pos, res = 0;
		
		int stack_200 = pos;
		if (memcmp(currentsrc.source, pos , "/*".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
		if (res >= 0){ 
			res = CC_PROC_ANY_201(pos);
			while (res < 0 && pos < currentsrc.source.length){ 
				pos++;
				res = CC_PROC_ANY_201(pos);
			}
			if (res >= 0){ 
				if (memcmp(currentsrc.source, pos , "*/".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
			}
		}
		if (res < 0){ pos = stack_200; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_203 = pos;
			if (memcmp(currentsrc.source, pos , "//".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
			if (res >= 0){ 
				res = CC_PROC_ANY_204(pos);
				while (res < 0 && pos < currentsrc.source.length){ 
					pos++;
					res = CC_PROC_ANY_204(pos);
				}
				if (res >= 0){ 
					if (memcmp(currentsrc.source, pos , "\n".getBytes()) == 0){ res = 0; pos += 1; } else { res = -1; }
				}
			}
			if (res < 0){ pos = stack_203; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}


//
 int CC_PROC_ANY_201(int pos){
	int ret = pos, res = 0;
	
	if (memcmp(currentsrc.source, pos , "*/".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
	
	if (res < 0){
		return res; 
	}
	return pos - ret;
}


//
 int CC_PROC_ANY_204(int pos){
	int ret = pos, res = 0;
	
	if (memcmp(currentsrc.source, pos , "\n".getBytes()) == 0){ res = 0; pos += 1; } else { res = -1; }
	
	if (res < 0){
		return res; 
	}
	return pos - ret;
}
	

//	compset_ops	
	 int CC_COMPSET_OPS(int pos){
		int ret = pos, res = 0;
		
		int stack_207 = pos;
		if (memcmp(currentsrc.source, pos , ">>=".getBytes()) == 0){ res = 0; pos += 3; } else { res = -1; }
		if (res < 0){ pos = stack_207; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_208 = pos;
			if (memcmp(currentsrc.source, pos , "<<=".getBytes()) == 0){ res = 0; pos += 3; } else { res = -1; }
			if (res < 0){ pos = stack_208; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_209 = pos;
				if (memcmp(currentsrc.source, pos , "|=".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
				if (res < 0){ pos = stack_209; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_210 = pos;
					if (memcmp(currentsrc.source, pos , "^=".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
					if (res < 0){ pos = stack_210; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						int stack_211 = pos;
						if (memcmp(currentsrc.source, pos , "&=".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
						if (res < 0){ pos = stack_211; }
						if (res >= 0){
							pos += res;
							res = 0;
						}
						else{
							int stack_212 = pos;
							if (memcmp(currentsrc.source, pos , "%=".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
							if (res < 0){ pos = stack_212; }
							if (res >= 0){
								pos += res;
								res = 0;
							}
							else{
								int stack_213 = pos;
								if (memcmp(currentsrc.source, pos , "/=".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
								if (res < 0){ pos = stack_213; }
								if (res >= 0){
									pos += res;
									res = 0;
								}
								else{
									int stack_214 = pos;
									if (memcmp(currentsrc.source, pos , "*=".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
									if (res < 0){ pos = stack_214; }
									if (res >= 0){
										pos += res;
										res = 0;
									}
									else{
										int stack_215 = pos;
										if (memcmp(currentsrc.source, pos , "-=".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
										if (res < 0){ pos = stack_215; }
										if (res >= 0){
											pos += res;
											res = 0;
										}
										else{
											int stack_216 = pos;
											if (memcmp(currentsrc.source, pos , "+=".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
											if (res < 0){ pos = stack_216; }
										}
									}
								}
							}
						}
					}
				}
			}
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	logicor_ops	
	 int CC_LOGICOR_OPS(int pos){
		int ret = pos, res = 0;
		
		int stack_218 = pos;
		if (memcmp(currentsrc.source, pos , "||".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
		if (res < 0){ pos = stack_218; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	logicand_ops	
	 int CC_LOGICAND_OPS(int pos){
		int ret = pos, res = 0;
		
		int stack_220 = pos;
		if (memcmp(currentsrc.source, pos , "&&".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
		if (res < 0){ pos = stack_220; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	bitor_ops	
	 int CC_BITOR_OPS(int pos){
		int ret = pos, res = 0;
		
		int stack_222 = pos;
		if (currentsrc.get(pos) == 124){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_222; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	bitxor_ops	
	 int CC_BITXOR_OPS(int pos){
		int ret = pos, res = 0;
		
		int stack_224 = pos;
		if (currentsrc.get(pos) == 94){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_224; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	bitand_ops	
	 int CC_BITAND_OPS(int pos){
		int ret = pos, res = 0;
		
		int stack_226 = pos;
		if (currentsrc.get(pos) == 38){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_226; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	equals_ops	
	 int CC_EQUALS_OPS(int pos){
		int ret = pos, res = 0;
		
		int stack_228 = pos;
		if (memcmp(currentsrc.source, pos , "==".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
		if (res < 0){ pos = stack_228; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_229 = pos;
			if (memcmp(currentsrc.source, pos , "!=".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
			if (res < 0){ pos = stack_229; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	bitmov_ops	
	 int CC_BITMOV_OPS(int pos){
		int ret = pos, res = 0;
		
		int stack_231 = pos;
		if (memcmp(currentsrc.source, pos , "<<".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
		if (res < 0){ pos = stack_231; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	meq	
	 int CC_MEQ(int pos){
		int ret = pos, res = 0;
		
		int stack_233 = pos;
		if (memcmp(currentsrc.source, pos , ">=".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
		if (res < 0){ pos = stack_233; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	leq	
	 int CC_LEQ(int pos){
		int ret = pos, res = 0;
		
		int stack_235 = pos;
		if (memcmp(currentsrc.source, pos , "<=".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
		if (res < 0){ pos = stack_235; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	lc	
	 int CC_LC(int pos){
		int ret = pos, res = 0;
		
		int stack_237 = pos;
		if (currentsrc.get(pos) == 60){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_237; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	rc	
	 int CC_RC(int pos){
		int ret = pos, res = 0;
		
		int stack_239 = pos;
		if (currentsrc.get(pos) == 62){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_239; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	self_ops	
	 int CC_SELF_OPS(int pos){
		int ret = pos, res = 0;
		
		int stack_241 = pos;
		if (memcmp(currentsrc.source, pos , "++".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
		if (res < 0){ pos = stack_241; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_242 = pos;
			if (memcmp(currentsrc.source, pos , "--".getBytes()) == 0){ res = 0; pos += 2; } else { res = -1; }
			if (res < 0){ pos = stack_242; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	unary_ops	
	 int CC_UNARY_OPS(int pos){
		int ret = pos, res = 0;
		
		int stack_244 = pos;
		if (currentsrc.get(pos) == 33){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_244; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_245 = pos;
			if (currentsrc.get(pos) == 126){ res = 0; pos++; } else { res = -1; }
			if (res < 0){ pos = stack_245; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	addsub_ops	
	 int CC_ADDSUB_OPS(int pos){
		int ret = pos, res = 0;
		
		int stack_247 = pos;
		if (currentsrc.get(pos) == 43){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_247; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_248 = pos;
			if (currentsrc.get(pos) == 45){ res = 0; pos++; } else { res = -1; }
			if (res < 0){ pos = stack_248; }
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	muldivmod_ops	
	 int CC_MULDIVMOD_OPS(int pos){
		int ret = pos, res = 0;
		
		int stack_250 = pos;
		if (currentsrc.get(pos) == 42){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_250; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_251 = pos;
			if (currentsrc.get(pos) == 47){ res = 0; pos++; } else { res = -1; }
			if (res < 0){ pos = stack_251; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_252 = pos;
				if (currentsrc.get(pos) == 37){ res = 0; pos++; } else { res = -1; }
				if (res < 0){ pos = stack_252; }
			}
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	mov	
	 int CC_MOV(int pos){
		int ret = pos, res = 0;
		
		int stack_254 = pos;
		if (currentsrc.get(pos) == 61){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_254; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	dot	
	 int CC_DOT(int pos){
		int ret = pos, res = 0;
		
		int stack_256 = pos;
		if (currentsrc.get(pos) == 46){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_256; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	lb	
	 int CC_LB(int pos){
		int ret = pos, res = 0;
		
		int stack_258 = pos;
		if (currentsrc.get(pos) == 40){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_258; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	rb	
	 int CC_RB(int pos){
		int ret = pos, res = 0;
		
		int stack_260 = pos;
		if (currentsrc.get(pos) == 41){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_260; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	ll	
	 int CC_LL(int pos){
		int ret = pos, res = 0;
		
		int stack_262 = pos;
		if (currentsrc.get(pos) == 123){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_262; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	lr	
	 int CC_LR(int pos){
		int ret = pos, res = 0;
		
		int stack_264 = pos;
		if (currentsrc.get(pos) == 125){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_264; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	ls	
	 int CC_LS(int pos){
		int ret = pos, res = 0;
		
		int stack_266 = pos;
		if (currentsrc.get(pos) == 91){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_266; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	rs	
	 int CC_RS(int pos){
		int ret = pos, res = 0;
		
		int stack_268 = pos;
		if (currentsrc.get(pos) == 93){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_268; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	le	
	 int CC_LE(int pos){
		int ret = pos, res = 0;
		
		int stack_270 = pos;
		if (currentsrc.get(pos) == 59){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_270; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	comma	
	 int CC_COMMA(int pos){
		int ret = pos, res = 0;
		
		int stack_272 = pos;
		if (currentsrc.get(pos) == 44){ res = 0; pos++; } else { res = -1; }
		if (res < 0){ pos = stack_272; }
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	string	
	 int CC_STRING(int pos){
		int ret = pos, res = 0;
		
		if (currentsrc.get(pos) == 34){ res = 0; pos++; } else { res = -1; }
		if (res >= 0){ 
			int stack_275 = pos;
			int resever_275pos = pos;
			do{
				int original_pos = pos;
				int stack_276 = pos;
				res = CC_STRCONT(pos);
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_276; }
				if (pos == original_pos){ if (pos > resever_275pos){ res = 0; }else{ res = -1; } break; }
			}while(true);

			if (res < 0){ pos = stack_275; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				res = 0;
			}
			if (res >= 0){ 
				if (currentsrc.get(pos) == 34){ res = 0; pos++; } else { res = -1; }
			}
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	

//	chars	
	 int CC_CHARS(int pos){
		int ret = pos, res = 0;
		
		if (currentsrc.get(pos) == '\''){ res = 0; pos++; } else { res = -1; }
		if (res >= 0){ 
			int stack_281 = pos;
			int resever_281pos = pos;
			do{
				int original_pos = pos;
				int stack_282 = pos;
				res = CC_CHARSCONT(pos);
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_282; }
				if (pos == original_pos){ if (pos > resever_281pos){ res = 0; }else{ res = -1; } break; }
			}while(true);

			if (res < 0){ pos = stack_281; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				res = 0;
			}
			if (res >= 0){ 
				if (currentsrc.get(pos) == '\''){ res = 0; pos++; } else { res = -1; }
			}
		}
		
		if (res < 0){
			return res; 
		}
		return pos - ret;
	}
	 int cclex(int pos, TOKEN object){
	int res = 0; 
		if (0 < (res = CC_K_SPACE(pos))){object.type = ID_CC_K_SPACE; return res;}
		if (0 < (res = CC_K_IMPORT(pos))){object.type = ID_CC_K_IMPORT; return res;}
		if (0 < (res = CC_K_CDECL(pos))){object.type = ID_CC_K_CDECL; return res;}
		if (0 < (res = CC_K_STDCALL(pos))){object.type = ID_CC_K_STDCALL; return res;}
		if (0 < (res = CC_K_FASTCALL(pos))){object.type = ID_CC_K_FASTCALL; return res;}
		if (0 < (res = CC_K_PASCAL(pos))){object.type = ID_CC_K_PASCAL; return res;}
		if (0 < (res = CC_K_OPERATOR(pos))){object.type = ID_CC_K_OPERATOR; return res;}
		if (0 < (res = CC_K_FOR(pos))){object.type = ID_CC_K_FOR; return res;}
		if (0 < (res = CC_K_WHILE(pos))){object.type = ID_CC_K_WHILE; return res;}
		if (0 < (res = CC_K_DO(pos))){object.type = ID_CC_K_DO; return res;}
		if (0 < (res = CC_K_TRY(pos))){object.type = ID_CC_K_TRY; return res;}
		if (0 < (res = CC_K_CATCH(pos))){object.type = ID_CC_K_CATCH; return res;}
		if (0 < (res = CC_K_IF(pos))){object.type = ID_CC_K_IF; return res;}
		if (0 < (res = CC_K_BREAK(pos))){object.type = ID_CC_K_BREAK; return res;}
		if (0 < (res = CC_K_CONTINUE(pos))){object.type = ID_CC_K_CONTINUE; return res;}
		if (0 < (res = CC_K_DEFAULT(pos))){object.type = ID_CC_K_DEFAULT; return res;}
		if (0 < (res = CC_K_INTERFACE(pos))){object.type = ID_CC_K_INTERFACE; return res;}
		if (0 < (res = CC_K_CLASS(pos))){object.type = ID_CC_K_CLASS; return res;}
		if (0 < (res = CC_K_PACKAGE(pos))){object.type = ID_CC_K_PACKAGE; return res;}
		if (0 < (res = CC_K_STATIC(pos))){object.type = ID_CC_K_STATIC; return res;}
		if (0 < (res = CC_K_CONST(pos))){object.type = ID_CC_K_CONST; return res;}
		if (0 < (res = CC_K_THROW(pos))){object.type = ID_CC_K_THROW; return res;}
		if (0 < (res = CC_K_SWITCH(pos))){object.type = ID_CC_K_SWITCH; return res;}
		if (0 < (res = CC_K_CASE(pos))){object.type = ID_CC_K_CASE; return res;}
		if (0 < (res = CC_K_ELSE(pos))){object.type = ID_CC_K_ELSE; return res;}
		if (0 < (res = CC_K_RETURN(pos))){object.type = ID_CC_K_RETURN; return res;}
		if (0 < (res = CC_K_NEW(pos))){object.type = ID_CC_K_NEW; return res;}
		if (0 < (res = CC_K_INCLUDE(pos))){object.type = ID_CC_K_INCLUDE; return res;}
		if (0 < (res = CC_K_USING(pos))){object.type = ID_CC_K_USING; return res;}
		if (0 < (res = CC_K_REQUIRE(pos))){object.type = ID_CC_K_REQUIRE; return res;}
		if (0 < (res = CC_K_FINALLY(pos))){object.type = ID_CC_K_FINALLY; return res;}
		if (0 < (res = CC_K_FINAL(pos))){object.type = ID_CC_K_FINAL; return res;}
		if (0 < (res = CC_K_SYNCHRONIZED_READ(pos))){object.type = ID_CC_K_SYNCHRONIZED_READ; return res;}
		if (0 < (res = CC_K_SYNCHRONIZED_WRITE(pos))){object.type = ID_CC_K_SYNCHRONIZED_WRITE; return res;}
		if (0 < (res = CC_K_SYNCHRONIZED(pos))){object.type = ID_CC_K_SYNCHRONIZED; return res;}
		if (0 < (res = CC_K_DECLARE(pos))){object.type = ID_CC_K_DECLARE; return res;}
		if (0 < (res = CC_HEX(pos))){object.type = ID_CC_HEX; return res;}
		if (0 < (res = CC_FLOAT(pos))){object.type = ID_CC_FLOAT; return res;}
		if (0 < (res = CC_LONGNUM(pos))){object.type = ID_CC_LONGNUM; return res;}
		if (0 < (res = CC_INTNUM(pos))){object.type = ID_CC_INTNUM; return res;}
		if (0 < (res = CC_WORD(pos))){object.type = ID_CC_WORD; return res;}
		if (0 < (res = CC_COLON(pos))){object.type = ID_CC_COLON; return res;}
		if (0 < (res = CC_QM(pos))){object.type = ID_CC_QM; return res;}
		if (0 < (res = CC_COMMENT(pos))){object.type = ID_CC_COMMENT; return res;}
		if (0 < (res = CC_COMPSET_OPS(pos))){object.type = ID_CC_COMPSET_OPS; return res;}
		if (0 < (res = CC_LOGICOR_OPS(pos))){object.type = ID_CC_LOGICOR_OPS; return res;}
		if (0 < (res = CC_LOGICAND_OPS(pos))){object.type = ID_CC_LOGICAND_OPS; return res;}
		if (0 < (res = CC_BITOR_OPS(pos))){object.type = ID_CC_BITOR_OPS; return res;}
		if (0 < (res = CC_BITXOR_OPS(pos))){object.type = ID_CC_BITXOR_OPS; return res;}
		if (0 < (res = CC_BITAND_OPS(pos))){object.type = ID_CC_BITAND_OPS; return res;}
		if (0 < (res = CC_EQUALS_OPS(pos))){object.type = ID_CC_EQUALS_OPS; return res;}
		if (0 < (res = CC_BITMOV_OPS(pos))){object.type = ID_CC_BITMOV_OPS; return res;}
		if (0 < (res = CC_MEQ(pos))){object.type = ID_CC_MEQ; return res;}
		if (0 < (res = CC_LEQ(pos))){object.type = ID_CC_LEQ; return res;}
		if (0 < (res = CC_LC(pos))){object.type = ID_CC_LC; return res;}
		if (0 < (res = CC_RC(pos))){object.type = ID_CC_RC; return res;}
		if (0 < (res = CC_SELF_OPS(pos))){object.type = ID_CC_SELF_OPS; return res;}
		if (0 < (res = CC_UNARY_OPS(pos))){object.type = ID_CC_UNARY_OPS; return res;}
		if (0 < (res = CC_ADDSUB_OPS(pos))){object.type = ID_CC_ADDSUB_OPS; return res;}
		if (0 < (res = CC_MULDIVMOD_OPS(pos))){object.type = ID_CC_MULDIVMOD_OPS; return res;}
		if (0 < (res = CC_MOV(pos))){object.type = ID_CC_MOV; return res;}
		if (0 < (res = CC_DOT(pos))){object.type = ID_CC_DOT; return res;}
		if (0 < (res = CC_LB(pos))){object.type = ID_CC_LB; return res;}
		if (0 < (res = CC_RB(pos))){object.type = ID_CC_RB; return res;}
		if (0 < (res = CC_LL(pos))){object.type = ID_CC_LL; return res;}
		if (0 < (res = CC_LR(pos))){object.type = ID_CC_LR; return res;}
		if (0 < (res = CC_LS(pos))){object.type = ID_CC_LS; return res;}
		if (0 < (res = CC_RS(pos))){object.type = ID_CC_RS; return res;}
		if (0 < (res = CC_LE(pos))){object.type = ID_CC_LE; return res;}
		if (0 < (res = CC_COMMA(pos))){object.type = ID_CC_COMMA; return res;}
		if (0 < (res = CC_STRING(pos))){object.type = ID_CC_STRING; return res;}
		if (0 < (res = CC_CHARS(pos))){object.type = ID_CC_CHARS; return res;}
		if (_listener != nilptr){
			_listener.OnLexError(currentsrc);
		}
		return -1;
	}
	

//	compset_symbol	
	 int CC_COMPSET_SYMBOL(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_COMPSET_SYMBOL) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_286 = pos;
		if ((lexget(pos).checkid(ID_CC_COMPSET_OPS))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_COMPSET_SYMBOL, ID_CC_COMPSET_OPS);}
		if (res < 0){ pos = stack_286; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_287 = pos;
			if ((lexget(pos).checkid(ID_CC_MOV))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_COMPSET_SYMBOL, ID_CC_MOV);}
			if (res < 0){ pos = stack_287; }
		}
		
		lexget(ret).unlockfunction(ID_CC_COMPSET_SYMBOL);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_COMPSET_SYMBOL(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_COMPSET_SYMBOL)) > 0){
			res = CC_COMPSET_SYMBOL(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	compset_operation	
	 int CC_COMPSET_OPERATION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_COMPSET_OPERATION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_289 = pos;
		if ((lexget(pos).checkid(ID_CC_NORMAL_OBJECT))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_NORMAL_OBJECT(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_289; }
		if (res >= 0){ 
			int stack_291 = pos;
			if ((lexget(pos).checkid(ID_CC_COMPSET_SYMBOL))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_COMPSET_SYMBOL(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_291; }
			if (res >= 0){ 
				int stack_293 = pos;
				if ((lexget(pos).checkid(ID_CC_OBJECT))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_OBJECT(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_293; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_COMPSET_OPERATION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_COMPSET_OPERATION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_COMPSET_OPERATION)) > 0){
			res = CC_COMPSET_OPERATION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	binary_expression	
	 int CC_BINARY_EXPRESSION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_BINARY_EXPRESSION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_295 = pos;
		if ((lexget(pos).checkid(ID_CC_OBJECT))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_OBJECT(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_295; }
		if (res >= 0){ 
			int stack_297 = pos;
			if ((lexget(pos).checkid(ID_CC_QM))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_BINARY_EXPRESSION, ID_CC_QM);}
			if (res < 0){ pos = stack_297; }
			if (res >= 0){ 
				int stack_299 = pos;
				if ((lexget(pos).checkid(ID_CC_OBJECT))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_OBJECT(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_299; }
				if (res >= 0){ 
					int stack_301 = pos;
					if ((lexget(pos).checkid(ID_CC_COLON))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_BINARY_EXPRESSION, ID_CC_COLON);}
					if (res < 0){ pos = stack_301; }
					if (res >= 0){ 
						int stack_303 = pos;
						if ((lexget(pos).checkid(ID_CC_OBJECT))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_OBJECT(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_303; }
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_BINARY_EXPRESSION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_BINARY_EXPRESSION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_BINARY_EXPRESSION)) > 0){
			res = CC_BINARY_EXPRESSION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	logicor_symbol	
	 int CC_LOGICOR_SYMBOL(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_LOGICOR_SYMBOL) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_305 = pos;
		if ((lexget(pos).checkid(ID_CC_LOGICOR_OPS))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_LOGICOR_SYMBOL, ID_CC_LOGICOR_OPS);}
		if (res < 0){ pos = stack_305; }
		
		lexget(ret).unlockfunction(ID_CC_LOGICOR_SYMBOL);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_LOGICOR_SYMBOL(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_LOGICOR_SYMBOL)) > 0){
			res = CC_LOGICOR_SYMBOL(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	logicor_operator	
	 int CC_LOGICOR_OPERATOR(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_LOGICOR_OPERATOR) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_307 = pos;
		if ((lexget(pos).checkid(ID_CC_LOGICAND_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_LOGICAND_OPERATION(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_307; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_308 = pos;
			if ((lexget(pos).checkid(ID_CC_LOGICAND_OPERATOR))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_LOGICAND_OPERATOR(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_308; }
		}
		
		lexget(ret).unlockfunction(ID_CC_LOGICOR_OPERATOR);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_LOGICOR_OPERATOR(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_LOGICOR_OPERATOR)) > 0){
			res = CC_LOGICOR_OPERATOR(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	logicor_operation	
	 int CC_LOGICOR_OPERATION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_LOGICOR_OPERATION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_310 = pos;
		int stack_311 = pos;
		if ((lexget(pos).checkid(ID_CC_LOGICOR_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_LOGICOR_OPERATION, ID_CC_LOGICOR_OPERATION);}
		if (res < 0){ pos = stack_311; }
		if (res < 0){ pos = stack_310; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_312 = pos;
			if ((lexget(pos).checkid(ID_CC_LOGICOR_OPERATOR))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_LOGICOR_OPERATOR(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_312; }
		}
		if (res >= 0){ 
			int stack_314 = pos;
			if ((lexget(pos).checkid(ID_CC_LOGICOR_SYMBOL))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_LOGICOR_SYMBOL(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_314; }
			if (res >= 0){ 
				int stack_316 = pos;
				if ((lexget(pos).checkid(ID_CC_LOGICOR_OPERATOR))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_LOGICOR_OPERATOR(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_316; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_LOGICOR_OPERATION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_LOGICOR_OPERATION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_LOGICOR_OPERATION)) > 0){
			res = CC_LOGICOR_OPERATION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	logicand_symbol	
	 int CC_LOGICAND_SYMBOL(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_LOGICAND_SYMBOL) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_318 = pos;
		if ((lexget(pos).checkid(ID_CC_LOGICAND_OPS))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_LOGICAND_SYMBOL, ID_CC_LOGICAND_OPS);}
		if (res < 0){ pos = stack_318; }
		
		lexget(ret).unlockfunction(ID_CC_LOGICAND_SYMBOL);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_LOGICAND_SYMBOL(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_LOGICAND_SYMBOL)) > 0){
			res = CC_LOGICAND_SYMBOL(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	logicand_operator	
	 int CC_LOGICAND_OPERATOR(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_LOGICAND_OPERATOR) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_320 = pos;
		if ((lexget(pos).checkid(ID_CC_BITOR_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_BITOR_OPERATION(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_320; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_321 = pos;
			if ((lexget(pos).checkid(ID_CC_BITOR_OPERATOR))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_BITOR_OPERATOR(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_321; }
		}
		
		lexget(ret).unlockfunction(ID_CC_LOGICAND_OPERATOR);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_LOGICAND_OPERATOR(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_LOGICAND_OPERATOR)) > 0){
			res = CC_LOGICAND_OPERATOR(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	logicand_operation	
	 int CC_LOGICAND_OPERATION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_LOGICAND_OPERATION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_323 = pos;
		int stack_324 = pos;
		if ((lexget(pos).checkid(ID_CC_LOGICAND_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_LOGICAND_OPERATION, ID_CC_LOGICAND_OPERATION);}
		if (res < 0){ pos = stack_324; }
		if (res < 0){ pos = stack_323; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_325 = pos;
			if ((lexget(pos).checkid(ID_CC_LOGICAND_OPERATOR))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_LOGICAND_OPERATOR(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_325; }
		}
		if (res >= 0){ 
			int stack_327 = pos;
			if ((lexget(pos).checkid(ID_CC_LOGICAND_SYMBOL))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_LOGICAND_SYMBOL(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_327; }
			if (res >= 0){ 
				int stack_329 = pos;
				if ((lexget(pos).checkid(ID_CC_LOGICAND_OPERATOR))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_LOGICAND_OPERATOR(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_329; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_LOGICAND_OPERATION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_LOGICAND_OPERATION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_LOGICAND_OPERATION)) > 0){
			res = CC_LOGICAND_OPERATION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	bitor_symbol	
	 int CC_BITOR_SYMBOL(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_BITOR_SYMBOL) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_331 = pos;
		if ((lexget(pos).checkid(ID_CC_BITOR_OPS))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_BITOR_SYMBOL, ID_CC_BITOR_OPS);}
		if (res < 0){ pos = stack_331; }
		
		lexget(ret).unlockfunction(ID_CC_BITOR_SYMBOL);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_BITOR_SYMBOL(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_BITOR_SYMBOL)) > 0){
			res = CC_BITOR_SYMBOL(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	bitor_operator	
	 int CC_BITOR_OPERATOR(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_BITOR_OPERATOR) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_333 = pos;
		if ((lexget(pos).checkid(ID_CC_BITXOR_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_BITXOR_OPERATION(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_333; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_334 = pos;
			if ((lexget(pos).checkid(ID_CC_BITXOR_OPERATOR))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_BITXOR_OPERATOR(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_334; }
		}
		
		lexget(ret).unlockfunction(ID_CC_BITOR_OPERATOR);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_BITOR_OPERATOR(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_BITOR_OPERATOR)) > 0){
			res = CC_BITOR_OPERATOR(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	bitor_operation	
	 int CC_BITOR_OPERATION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_BITOR_OPERATION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_336 = pos;
		int stack_337 = pos;
		if ((lexget(pos).checkid(ID_CC_BITOR_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_BITOR_OPERATION, ID_CC_BITOR_OPERATION);}
		if (res < 0){ pos = stack_337; }
		if (res < 0){ pos = stack_336; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_338 = pos;
			if ((lexget(pos).checkid(ID_CC_BITOR_OPERATOR))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_BITOR_OPERATOR(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_338; }
		}
		if (res >= 0){ 
			int stack_340 = pos;
			if ((lexget(pos).checkid(ID_CC_BITOR_SYMBOL))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_BITOR_SYMBOL(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_340; }
			if (res >= 0){ 
				int stack_342 = pos;
				if ((lexget(pos).checkid(ID_CC_BITOR_OPERATOR))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_BITOR_OPERATOR(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_342; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_BITOR_OPERATION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_BITOR_OPERATION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_BITOR_OPERATION)) > 0){
			res = CC_BITOR_OPERATION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	bitxor_symbol	
	 int CC_BITXOR_SYMBOL(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_BITXOR_SYMBOL) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_344 = pos;
		if ((lexget(pos).checkid(ID_CC_BITXOR_OPS))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_BITXOR_SYMBOL, ID_CC_BITXOR_OPS);}
		if (res < 0){ pos = stack_344; }
		
		lexget(ret).unlockfunction(ID_CC_BITXOR_SYMBOL);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_BITXOR_SYMBOL(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_BITXOR_SYMBOL)) > 0){
			res = CC_BITXOR_SYMBOL(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	bitxor_operator	
	 int CC_BITXOR_OPERATOR(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_BITXOR_OPERATOR) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_346 = pos;
		if ((lexget(pos).checkid(ID_CC_BITAND_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_BITAND_OPERATION(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_346; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_347 = pos;
			if ((lexget(pos).checkid(ID_CC_BITAND_OPERATOR))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_BITAND_OPERATOR(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_347; }
		}
		
		lexget(ret).unlockfunction(ID_CC_BITXOR_OPERATOR);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_BITXOR_OPERATOR(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_BITXOR_OPERATOR)) > 0){
			res = CC_BITXOR_OPERATOR(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	bitxor_operation	
	 int CC_BITXOR_OPERATION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_BITXOR_OPERATION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_349 = pos;
		int stack_350 = pos;
		if ((lexget(pos).checkid(ID_CC_BITXOR_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_BITXOR_OPERATION, ID_CC_BITXOR_OPERATION);}
		if (res < 0){ pos = stack_350; }
		if (res < 0){ pos = stack_349; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_351 = pos;
			if ((lexget(pos).checkid(ID_CC_BITXOR_OPERATOR))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_BITXOR_OPERATOR(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_351; }
		}
		if (res >= 0){ 
			int stack_353 = pos;
			if ((lexget(pos).checkid(ID_CC_BITXOR_SYMBOL))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_BITXOR_SYMBOL(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_353; }
			if (res >= 0){ 
				int stack_355 = pos;
				if ((lexget(pos).checkid(ID_CC_BITXOR_OPERATOR))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_BITXOR_OPERATOR(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_355; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_BITXOR_OPERATION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_BITXOR_OPERATION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_BITXOR_OPERATION)) > 0){
			res = CC_BITXOR_OPERATION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	bitand_symbol	
	 int CC_BITAND_SYMBOL(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_BITAND_SYMBOL) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_357 = pos;
		if ((lexget(pos).checkid(ID_CC_BITAND_OPS))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_BITAND_SYMBOL, ID_CC_BITAND_OPS);}
		if (res < 0){ pos = stack_357; }
		
		lexget(ret).unlockfunction(ID_CC_BITAND_SYMBOL);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_BITAND_SYMBOL(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_BITAND_SYMBOL)) > 0){
			res = CC_BITAND_SYMBOL(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	bitand_operator	
	 int CC_BITAND_OPERATOR(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_BITAND_OPERATOR) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_359 = pos;
		if ((lexget(pos).checkid(ID_CC_EQUALS_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_EQUALS_OPERATION(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_359; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_360 = pos;
			if ((lexget(pos).checkid(ID_CC_EQUALS_OPERATOR))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_EQUALS_OPERATOR(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_360; }
		}
		
		lexget(ret).unlockfunction(ID_CC_BITAND_OPERATOR);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_BITAND_OPERATOR(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_BITAND_OPERATOR)) > 0){
			res = CC_BITAND_OPERATOR(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	bitand_operation	
	 int CC_BITAND_OPERATION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_BITAND_OPERATION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_362 = pos;
		int stack_363 = pos;
		if ((lexget(pos).checkid(ID_CC_BITAND_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_BITAND_OPERATION, ID_CC_BITAND_OPERATION);}
		if (res < 0){ pos = stack_363; }
		if (res < 0){ pos = stack_362; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_364 = pos;
			if ((lexget(pos).checkid(ID_CC_BITAND_OPERATOR))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_BITAND_OPERATOR(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_364; }
		}
		if (res >= 0){ 
			int stack_366 = pos;
			if ((lexget(pos).checkid(ID_CC_BITAND_SYMBOL))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_BITAND_SYMBOL(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_366; }
			if (res >= 0){ 
				int stack_368 = pos;
				if ((lexget(pos).checkid(ID_CC_BITAND_OPERATOR))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_BITAND_OPERATOR(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_368; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_BITAND_OPERATION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_BITAND_OPERATION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_BITAND_OPERATION)) > 0){
			res = CC_BITAND_OPERATION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	equals_symbol	
	 int CC_EQUALS_SYMBOL(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_EQUALS_SYMBOL) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_370 = pos;
		if ((lexget(pos).checkid(ID_CC_EQUALS_OPS))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_EQUALS_SYMBOL, ID_CC_EQUALS_OPS);}
		if (res < 0){ pos = stack_370; }
		
		lexget(ret).unlockfunction(ID_CC_EQUALS_SYMBOL);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_EQUALS_SYMBOL(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_EQUALS_SYMBOL)) > 0){
			res = CC_EQUALS_SYMBOL(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	equals_operator	
	 int CC_EQUALS_OPERATOR(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_EQUALS_OPERATOR) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_372 = pos;
		if ((lexget(pos).checkid(ID_CC_COMPARE_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_COMPARE_OPERATION(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_372; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_373 = pos;
			if ((lexget(pos).checkid(ID_CC_COMPARE_OPERATOR))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_COMPARE_OPERATOR(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_373; }
		}
		
		lexget(ret).unlockfunction(ID_CC_EQUALS_OPERATOR);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_EQUALS_OPERATOR(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_EQUALS_OPERATOR)) > 0){
			res = CC_EQUALS_OPERATOR(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	equals_operation	
	 int CC_EQUALS_OPERATION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_EQUALS_OPERATION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_375 = pos;
		int stack_376 = pos;
		if ((lexget(pos).checkid(ID_CC_EQUALS_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_EQUALS_OPERATION, ID_CC_EQUALS_OPERATION);}
		if (res < 0){ pos = stack_376; }
		if (res < 0){ pos = stack_375; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_377 = pos;
			if ((lexget(pos).checkid(ID_CC_EQUALS_OPERATOR))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_EQUALS_OPERATOR(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_377; }
		}
		if (res >= 0){ 
			int stack_379 = pos;
			if ((lexget(pos).checkid(ID_CC_EQUALS_SYMBOL))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_EQUALS_SYMBOL(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_379; }
			if (res >= 0){ 
				int stack_381 = pos;
				if ((lexget(pos).checkid(ID_CC_EQUALS_OPERATOR))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_EQUALS_OPERATOR(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_381; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_EQUALS_OPERATION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_EQUALS_OPERATION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_EQUALS_OPERATION)) > 0){
			res = CC_EQUALS_OPERATION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	compare_symbol	
	 int CC_COMPARE_SYMBOL(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_COMPARE_SYMBOL) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_383 = pos;
		if ((lexget(pos).checkid(ID_CC_MEQ))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_COMPARE_SYMBOL, ID_CC_MEQ);}
		if (res < 0){ pos = stack_383; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_384 = pos;
			if ((lexget(pos).checkid(ID_CC_RC))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_COMPARE_SYMBOL, ID_CC_RC);}
			if (res < 0){ pos = stack_384; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_385 = pos;
				if ((lexget(pos).checkid(ID_CC_LEQ))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_COMPARE_SYMBOL, ID_CC_LEQ);}
				if (res < 0){ pos = stack_385; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_386 = pos;
					if ((lexget(pos).checkid(ID_CC_LC))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_COMPARE_SYMBOL, ID_CC_LC);}
					if (res < 0){ pos = stack_386; }
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_COMPARE_SYMBOL);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_COMPARE_SYMBOL(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_COMPARE_SYMBOL)) > 0){
			res = CC_COMPARE_SYMBOL(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	compare_operator	
	 int CC_COMPARE_OPERATOR(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_COMPARE_OPERATOR) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_388 = pos;
		if ((lexget(pos).checkid(ID_CC_BITMOV_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_BITMOV_OPERATION(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_388; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_389 = pos;
			if ((lexget(pos).checkid(ID_CC_BITMOV_OPERATOR))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_BITMOV_OPERATOR(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_389; }
		}
		
		lexget(ret).unlockfunction(ID_CC_COMPARE_OPERATOR);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_COMPARE_OPERATOR(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_COMPARE_OPERATOR)) > 0){
			res = CC_COMPARE_OPERATOR(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	compare_operation	
	 int CC_COMPARE_OPERATION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_COMPARE_OPERATION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_391 = pos;
		int stack_392 = pos;
		if ((lexget(pos).checkid(ID_CC_COMPARE_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_COMPARE_OPERATION, ID_CC_COMPARE_OPERATION);}
		if (res < 0){ pos = stack_392; }
		if (res < 0){ pos = stack_391; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_393 = pos;
			if ((lexget(pos).checkid(ID_CC_COMPARE_OPERATOR))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_COMPARE_OPERATOR(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_393; }
		}
		if (res >= 0){ 
			int stack_395 = pos;
			if ((lexget(pos).checkid(ID_CC_COMPARE_SYMBOL))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_COMPARE_SYMBOL(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_395; }
			if (res >= 0){ 
				int stack_397 = pos;
				if ((lexget(pos).checkid(ID_CC_COMPARE_OPERATOR))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_COMPARE_OPERATOR(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_397; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_COMPARE_OPERATION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_COMPARE_OPERATION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_COMPARE_OPERATION)) > 0){
			res = CC_COMPARE_OPERATION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	bitmov_symbol	
	 int CC_BITMOV_SYMBOL(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_BITMOV_SYMBOL) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_399 = pos;
		if ((lexget(pos).checkid(ID_CC_BITMOV_OPS))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_BITMOV_SYMBOL, ID_CC_BITMOV_OPS);}
		if (res < 0){ pos = stack_399; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_400 = pos;
			int stack_401 = pos;
			if ((lexget(pos).checkid(ID_CC_RC))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_BITMOV_SYMBOL, ID_CC_RC);}
			if (res < 0){ pos = stack_401; }
			if (res >= 0){ 
				int stack_403 = pos;
				if ((lexget(pos).checkid(ID_CC_RC))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_BITMOV_SYMBOL, ID_CC_RC);}
				if (res < 0){ pos = stack_403; }
			}
			if (res < 0){ pos = stack_400; }
		}
		
		lexget(ret).unlockfunction(ID_CC_BITMOV_SYMBOL);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_BITMOV_SYMBOL(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_BITMOV_SYMBOL)) > 0){
			res = CC_BITMOV_SYMBOL(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	bitmov_operator	
	 int CC_BITMOV_OPERATOR(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_BITMOV_OPERATOR) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_405 = pos;
		if ((lexget(pos).checkid(ID_CC_ADDSUB_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_ADDSUB_OPERATION(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_405; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_406 = pos;
			if ((lexget(pos).checkid(ID_CC_ADDSUB_OPERATOR))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_ADDSUB_OPERATOR(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_406; }
		}
		
		lexget(ret).unlockfunction(ID_CC_BITMOV_OPERATOR);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_BITMOV_OPERATOR(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_BITMOV_OPERATOR)) > 0){
			res = CC_BITMOV_OPERATOR(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	bitmov_operation	
	 int CC_BITMOV_OPERATION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_BITMOV_OPERATION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_408 = pos;
		int stack_409 = pos;
		if ((lexget(pos).checkid(ID_CC_BITMOV_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_BITMOV_OPERATION, ID_CC_BITMOV_OPERATION);}
		if (res < 0){ pos = stack_409; }
		if (res < 0){ pos = stack_408; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_410 = pos;
			if ((lexget(pos).checkid(ID_CC_BITMOV_OPERATOR))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_BITMOV_OPERATOR(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_410; }
		}
		if (res >= 0){ 
			int stack_412 = pos;
			if ((lexget(pos).checkid(ID_CC_BITMOV_SYMBOL))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_BITMOV_SYMBOL(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_412; }
			if (res >= 0){ 
				int stack_414 = pos;
				if ((lexget(pos).checkid(ID_CC_BITMOV_OPERATOR))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_BITMOV_OPERATOR(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_414; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_BITMOV_OPERATION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_BITMOV_OPERATION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_BITMOV_OPERATION)) > 0){
			res = CC_BITMOV_OPERATION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	addsub_symbol	
	 int CC_ADDSUB_SYMBOL(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_ADDSUB_SYMBOL) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_416 = pos;
		if ((lexget(pos).checkid(ID_CC_ADDSUB_OPS))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_ADDSUB_SYMBOL, ID_CC_ADDSUB_OPS);}
		if (res < 0){ pos = stack_416; }
		
		lexget(ret).unlockfunction(ID_CC_ADDSUB_SYMBOL);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_ADDSUB_SYMBOL(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_ADDSUB_SYMBOL)) > 0){
			res = CC_ADDSUB_SYMBOL(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	addsub_operator	
	 int CC_ADDSUB_OPERATOR(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_ADDSUB_OPERATOR) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_418 = pos;
		if ((lexget(pos).checkid(ID_CC_MULDIVMOD_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_MULDIVMOD_OPERATION(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_418; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_419 = pos;
			if ((lexget(pos).checkid(ID_CC_MULDIVMOD_OPERATOR))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_MULDIVMOD_OPERATOR(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_419; }
		}
		
		lexget(ret).unlockfunction(ID_CC_ADDSUB_OPERATOR);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_ADDSUB_OPERATOR(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_ADDSUB_OPERATOR)) > 0){
			res = CC_ADDSUB_OPERATOR(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	addsub_operation	
	 int CC_ADDSUB_OPERATION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_ADDSUB_OPERATION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_421 = pos;
		int stack_422 = pos;
		if ((lexget(pos).checkid(ID_CC_ADDSUB_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_ADDSUB_OPERATION, ID_CC_ADDSUB_OPERATION);}
		if (res < 0){ pos = stack_422; }
		if (res < 0){ pos = stack_421; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_423 = pos;
			if ((lexget(pos).checkid(ID_CC_ADDSUB_OPERATOR))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_ADDSUB_OPERATOR(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_423; }
		}
		if (res >= 0){ 
			int stack_425 = pos;
			if ((lexget(pos).checkid(ID_CC_ADDSUB_SYMBOL))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_ADDSUB_SYMBOL(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_425; }
			if (res >= 0){ 
				int stack_427 = pos;
				if ((lexget(pos).checkid(ID_CC_ADDSUB_OPERATOR))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_ADDSUB_OPERATOR(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_427; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_ADDSUB_OPERATION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_ADDSUB_OPERATION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_ADDSUB_OPERATION)) > 0){
			res = CC_ADDSUB_OPERATION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	muldivmod_symbol	
	 int CC_MULDIVMOD_SYMBOL(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_MULDIVMOD_SYMBOL) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_429 = pos;
		if ((lexget(pos).checkid(ID_CC_MULDIVMOD_OPS))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_MULDIVMOD_SYMBOL, ID_CC_MULDIVMOD_OPS);}
		if (res < 0){ pos = stack_429; }
		
		lexget(ret).unlockfunction(ID_CC_MULDIVMOD_SYMBOL);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_MULDIVMOD_SYMBOL(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_MULDIVMOD_SYMBOL)) > 0){
			res = CC_MULDIVMOD_SYMBOL(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	muldivmod_operator	
	 int CC_MULDIVMOD_OPERATOR(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_MULDIVMOD_OPERATOR) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_431 = pos;
		if ((lexget(pos).checkid(ID_CC_UNARY_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_UNARY_OPERATION(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_431; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_432 = pos;
			if ((lexget(pos).checkid(ID_CC_UNARY_OPERATOR))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_UNARY_OPERATOR(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_432; }
		}
		
		lexget(ret).unlockfunction(ID_CC_MULDIVMOD_OPERATOR);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_MULDIVMOD_OPERATOR(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_MULDIVMOD_OPERATOR)) > 0){
			res = CC_MULDIVMOD_OPERATOR(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	muldivmod_operation	
	 int CC_MULDIVMOD_OPERATION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_MULDIVMOD_OPERATION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_434 = pos;
		int stack_435 = pos;
		if ((lexget(pos).checkid(ID_CC_MULDIVMOD_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_MULDIVMOD_OPERATION, ID_CC_MULDIVMOD_OPERATION);}
		if (res < 0){ pos = stack_435; }
		if (res < 0){ pos = stack_434; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_436 = pos;
			if ((lexget(pos).checkid(ID_CC_MULDIVMOD_OPERATOR))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_MULDIVMOD_OPERATOR(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_436; }
		}
		if (res >= 0){ 
			int stack_438 = pos;
			if ((lexget(pos).checkid(ID_CC_MULDIVMOD_SYMBOL))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_MULDIVMOD_SYMBOL(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_438; }
			if (res >= 0){ 
				int stack_440 = pos;
				if ((lexget(pos).checkid(ID_CC_MULDIVMOD_OPERATOR))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_MULDIVMOD_OPERATOR(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_440; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_MULDIVMOD_OPERATION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_MULDIVMOD_OPERATION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_MULDIVMOD_OPERATION)) > 0){
			res = CC_MULDIVMOD_OPERATION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	unary_symbol	
	 int CC_UNARY_SYMBOL(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_UNARY_SYMBOL) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_442 = pos;
		if ((lexget(pos).checkid(ID_CC_UNARY_OPS))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_UNARY_SYMBOL, ID_CC_UNARY_OPS);}
		if (res < 0){ pos = stack_442; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_443 = pos;
			if ((lexget(pos).checkid(ID_CC_SELF_OPS))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_UNARY_SYMBOL, ID_CC_SELF_OPS);}
			if (res < 0){ pos = stack_443; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_444 = pos;
				if ((lexget(pos).checkid(ID_CC_ADDSUB_OPS))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_UNARY_SYMBOL, ID_CC_ADDSUB_OPS);}
				if (res < 0){ pos = stack_444; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_UNARY_SYMBOL);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_UNARY_SYMBOL(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_UNARY_SYMBOL)) > 0){
			res = CC_UNARY_SYMBOL(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	unary_operator	
	 int CC_UNARY_OPERATOR(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_UNARY_OPERATOR) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_446 = pos;
		if ((lexget(pos).checkid(ID_CC_NORMAL_OBJECT))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_NORMAL_OBJECT(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_446; }
		
		lexget(ret).unlockfunction(ID_CC_UNARY_OPERATOR);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_UNARY_OPERATOR(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_UNARY_OPERATOR)) > 0){
			res = CC_UNARY_OPERATOR(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	unary_operation	
	 int CC_UNARY_OPERATION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_UNARY_OPERATION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_448 = pos;
		int stack_449 = pos;
		if ((lexget(pos).checkid(ID_CC_UNARY_SYMBOL))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_UNARY_SYMBOL(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_449; }
		if (res >= 0){ 
			int stack_451 = pos;
			int stack_452 = pos;
			if ((lexget(pos).checkid(ID_CC_UNARY_OPERATION))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_UNARY_OPERATION, ID_CC_UNARY_OPERATION);}
			if (res < 0){ pos = stack_452; }
			if (res < 0){ pos = stack_451; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_453 = pos;
				if ((lexget(pos).checkid(ID_CC_UNARY_OPERATOR))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_UNARY_OPERATOR(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_453; }
			}
		}
		if (res < 0){ pos = stack_448; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_454 = pos;
			int stack_455 = pos;
			int stack_456 = pos;
			if ((lexget(pos).checkid(ID_CC_UNARY_OPERATION))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_UNARY_OPERATION, ID_CC_UNARY_OPERATION);}
			if (res < 0){ pos = stack_456; }
			if (res < 0){ pos = stack_455; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_457 = pos;
				if ((lexget(pos).checkid(ID_CC_UNARY_OPERATOR))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_UNARY_OPERATOR(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_457; }
			}
			if (res >= 0){ 
				int stack_459 = pos;
				if ((lexget(pos).checkid(ID_CC_SELF_OPS))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_UNARY_OPERATION, ID_CC_SELF_OPS);}
				if (res < 0){ pos = stack_459; }
			}
			if (res < 0){ pos = stack_454; }
		}
		
		lexget(ret).unlockfunction(ID_CC_UNARY_OPERATION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_UNARY_OPERATION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_UNARY_OPERATION)) > 0){
			res = CC_UNARY_OPERATION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	const_object	
	 int CC_CONST_OBJECT(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_CONST_OBJECT) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_461 = pos;
		if ((lexget(pos).checkid(ID_CC_HEX))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_CONST_OBJECT, ID_CC_HEX);}
		if (res < 0){ pos = stack_461; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_462 = pos;
			if ((lexget(pos).checkid(ID_CC_LONGNUM))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_CONST_OBJECT, ID_CC_LONGNUM);}
			if (res < 0){ pos = stack_462; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_463 = pos;
				if ((lexget(pos).checkid(ID_CC_INTNUM))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_CONST_OBJECT, ID_CC_INTNUM);}
				if (res < 0){ pos = stack_463; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_464 = pos;
					if ((lexget(pos).checkid(ID_CC_FLOAT))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_CONST_OBJECT, ID_CC_FLOAT);}
					if (res < 0){ pos = stack_464; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						int stack_465 = pos;
						if ((lexget(pos).checkid(ID_CC_STRING))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else
						{res = -1;setRecord(ret, pos, ID_CC_CONST_OBJECT, ID_CC_STRING);}
						if (res < 0){ pos = stack_465; }
						if (res >= 0){
							pos += res;
							res = 0;
						}
						else{
							int stack_466 = pos;
							if ((lexget(pos).checkid(ID_CC_CHARS))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else
							{res = -1;setRecord(ret, pos, ID_CC_CONST_OBJECT, ID_CC_CHARS);}
							if (res < 0){ pos = stack_466; }
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_CONST_OBJECT);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_CONST_OBJECT(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_CONST_OBJECT)) > 0){
			res = CC_CONST_OBJECT(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	word_exp	
	 int CC_WORD_EXP(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_WORD_EXP) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_468 = pos;
		if ((lexget(pos).checkid(ID_CC_WORD))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_WORD_EXP, ID_CC_WORD);}
		if (res < 0){ pos = stack_468; }
		
		lexget(ret).unlockfunction(ID_CC_WORD_EXP);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_WORD_EXP(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_WORD_EXP)) > 0){
			res = CC_WORD_EXP(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	meta_object	
	 int CC_META_OBJECT(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_META_OBJECT) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_470 = pos;
		int stack_471 = pos;
		if ((lexget(pos).checkid(ID_CC_K_OPERATOR))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_META_OBJECT, ID_CC_K_OPERATOR);}
		if (res < 0){ pos = stack_471; }
		if (res >= 0){ 
			int stack_473 = pos;
			if ((lexget(pos).checkid(ID_CC_COMPSET_SYMBOL))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_COMPSET_SYMBOL(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_473; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_474 = pos;
				if ((lexget(pos).checkid(ID_CC_LOGICOR_OPS))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_META_OBJECT, ID_CC_LOGICOR_OPS);}
				if (res < 0){ pos = stack_474; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_475 = pos;
					if ((lexget(pos).checkid(ID_CC_LOGICAND_OPS))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_META_OBJECT, ID_CC_LOGICAND_OPS);}
					if (res < 0){ pos = stack_475; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						int stack_476 = pos;
						if ((lexget(pos).checkid(ID_CC_BITOR_OPS))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else
						{res = -1;setRecord(ret, pos, ID_CC_META_OBJECT, ID_CC_BITOR_OPS);}
						if (res < 0){ pos = stack_476; }
						if (res >= 0){
							pos += res;
							res = 0;
						}
						else{
							int stack_477 = pos;
							if ((lexget(pos).checkid(ID_CC_BITXOR_OPS))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else
							{res = -1;setRecord(ret, pos, ID_CC_META_OBJECT, ID_CC_BITXOR_OPS);}
							if (res < 0){ pos = stack_477; }
							if (res >= 0){
								pos += res;
								res = 0;
							}
							else{
								int stack_478 = pos;
								if ((lexget(pos).checkid(ID_CC_BITAND_OPS))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else
								{res = -1;setRecord(ret, pos, ID_CC_META_OBJECT, ID_CC_BITAND_OPS);}
								if (res < 0){ pos = stack_478; }
								if (res >= 0){
									pos += res;
									res = 0;
								}
								else{
									int stack_479 = pos;
									if ((lexget(pos).checkid(ID_CC_EQUALS_OPS))){
										pos += lexget(pos).tokenlength;
										res = 0;
									}
									else
									{res = -1;setRecord(ret, pos, ID_CC_META_OBJECT, ID_CC_EQUALS_OPS);}
									if (res < 0){ pos = stack_479; }
									if (res >= 0){
										pos += res;
										res = 0;
									}
									else{
										int stack_480 = pos;
										if ((lexget(pos).checkid(ID_CC_BITMOV_OPS))){
											pos += lexget(pos).tokenlength;
											res = 0;
										}
										else
										{res = -1;setRecord(ret, pos, ID_CC_META_OBJECT, ID_CC_BITMOV_OPS);}
										if (res < 0){ pos = stack_480; }
										if (res >= 0){
											pos += res;
											res = 0;
										}
										else{
											int stack_481 = pos;
											if ((lexget(pos).checkid(ID_CC_COMPARE_SYMBOL))){
												pos += lexget(pos).tokenlength;
												res = 0;
											}
											else{
												res = CC_COMPARE_SYMBOL(pos, _context);
												context.reduced |= _context.reduced;
												_context.reduced = 0;
											}
											if (res >= 0){
												pos += res;
												res = 0;
											}
											if (res < 0){ pos = stack_481; }
											if (res >= 0){
												pos += res;
												res = 0;
											}
											else{
												int stack_482 = pos;
												if ((lexget(pos).checkid(ID_CC_SELF_OPS))){
													pos += lexget(pos).tokenlength;
													res = 0;
												}
												else
												{res = -1;setRecord(ret, pos, ID_CC_META_OBJECT, ID_CC_SELF_OPS);}
												if (res < 0){ pos = stack_482; }
												if (res >= 0){
													pos += res;
													res = 0;
												}
												else{
													int stack_483 = pos;
													if ((lexget(pos).checkid(ID_CC_UNARY_OPS))){
														pos += lexget(pos).tokenlength;
														res = 0;
													}
													else
													{res = -1;setRecord(ret, pos, ID_CC_META_OBJECT, ID_CC_UNARY_OPS);}
													if (res < 0){ pos = stack_483; }
													if (res >= 0){
														pos += res;
														res = 0;
													}
													else{
														int stack_484 = pos;
														if ((lexget(pos).checkid(ID_CC_ADDSUB_OPS))){
															pos += lexget(pos).tokenlength;
															res = 0;
														}
														else
														{res = -1;setRecord(ret, pos, ID_CC_META_OBJECT, ID_CC_ADDSUB_OPS);}
														if (res < 0){ pos = stack_484; }
														if (res >= 0){
															pos += res;
															res = 0;
														}
														else{
															int stack_485 = pos;
															if ((lexget(pos).checkid(ID_CC_MULDIVMOD_OPS))){
																pos += lexget(pos).tokenlength;
																res = 0;
															}
															else
															{res = -1;setRecord(ret, pos, ID_CC_META_OBJECT, ID_CC_MULDIVMOD_OPS);}
															if (res < 0){ pos = stack_485; }
															if (res >= 0){
																pos += res;
																res = 0;
															}
															else{
																int stack_486 = pos;
																if ((lexget(pos).checkid(ID_CC_DOT))){
																	pos += lexget(pos).tokenlength;
																	res = 0;
																}
																else
																{res = -1;setRecord(ret, pos, ID_CC_META_OBJECT, ID_CC_DOT);}
																if (res < 0){ pos = stack_486; }
																if (res >= 0){
																	pos += res;
																	res = 0;
																}
																else{
																	int stack_487 = pos;
																	int stack_488 = pos;
																	if ((lexget(pos).checkid(ID_CC_LS))){
																		pos += lexget(pos).tokenlength;
																		res = 0;
																	}
																	else
																	{res = -1;setRecord(ret, pos, ID_CC_META_OBJECT, ID_CC_LS);}
																	if (res < 0){ pos = stack_488; }
																	if (res >= 0){ 
																		int stack_490 = pos;
																		if ((lexget(pos).checkid(ID_CC_RS))){
																			pos += lexget(pos).tokenlength;
																			res = 0;
																		}
																		else
																		{res = -1;setRecord(ret, pos, ID_CC_META_OBJECT, ID_CC_RS);}
																		if (res < 0){ pos = stack_490; }
																	}
																	if (res < 0){ pos = stack_487; }
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		if (res < 0){ pos = stack_470; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_491 = pos;
			int stack_492 = pos;
			if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_WORD_EXP(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_492; }
			if (res < 0){ pos = stack_491; }
		}
		
		lexget(ret).unlockfunction(ID_CC_META_OBJECT);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_META_OBJECT(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_META_OBJECT)) > 0){
			res = CC_META_OBJECT(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	static_ownner	
	 int CC_STATIC_OWNNER(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_STATIC_OWNNER) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_494 = pos;
		int stack_495 = pos;
		if ((lexget(pos).checkid(ID_CC_STATIC_OWNNER))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_STATIC_OWNNER, ID_CC_STATIC_OWNNER);}
		if (res < 0){ pos = stack_495; }
		if (res < 0){ pos = stack_494; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_496 = pos;
			if ((lexget(pos).checkid(ID_CC_TEMPLATE_OBJECT))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_TEMPLATE_OBJECT(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_496; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_497 = pos;
				if ((lexget(pos).checkid(ID_CC_OBJECT_BLOCK))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_OBJECT_BLOCK(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_497; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_498 = pos;
					if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_WORD_EXP(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_498; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						int stack_499 = pos;
						if ((lexget(pos).checkid(ID_CC_CONST_OBJECT))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_CONST_OBJECT(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_499; }
					}
				}
			}
		}
		if (res >= 0){ 
			int stack_501 = pos;
			if ((lexget(pos).checkid(ID_CC_DOT))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_STATIC_OWNNER, ID_CC_DOT);}
			if (res < 0){ pos = stack_501; }
			if (res >= 0){ 
				int stack_503 = pos;
				if ((lexget(pos).checkid(ID_CC_META_OBJECT))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_META_OBJECT(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_503; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_STATIC_OWNNER);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_STATIC_OWNNER(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_STATIC_OWNNER)) > 0){
			res = CC_STATIC_OWNNER(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	static_element	
	 int CC_STATIC_ELEMENT(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_STATIC_ELEMENT) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_505 = pos;
		int stack_506 = pos;
		if ((lexget(pos).checkid(ID_CC_STATIC_ELEMENT))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_STATIC_ELEMENT, ID_CC_STATIC_ELEMENT);}
		if (res < 0){ pos = stack_506; }
		if (res < 0){ pos = stack_505; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_507 = pos;
			int stack_508 = pos;
			if ((lexget(pos).checkid(ID_CC_STATIC_OWNNER))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_STATIC_OWNNER(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_508; }
			if (res < 0){ pos = stack_507; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_509 = pos;
				if ((lexget(pos).checkid(ID_CC_OBJECT_BLOCK))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_OBJECT_BLOCK(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_509; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_510 = pos;
					int stack_511 = pos;
					if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_WORD_EXP(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_511; }
					if (res < 0){ pos = stack_510; }
				}
			}
		}
		if (res >= 0){ 
			int stack_513 = pos;
			if ((lexget(pos).checkid(ID_CC_LS))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_STATIC_ELEMENT, ID_CC_LS);}
			if (res < 0){ pos = stack_513; }
			if (res >= 0){ 
				int stack_515 = pos;
				if ((lexget(pos).checkid(ID_CC_OBJECT))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_OBJECT(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_515; }
				if (res >= 0){ 
					int stack_517 = pos;
					if ((lexget(pos).checkid(ID_CC_RS))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_STATIC_ELEMENT, ID_CC_RS);}
					if (res < 0){ pos = stack_517; }
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_STATIC_ELEMENT);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_STATIC_ELEMENT(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_STATIC_ELEMENT)) > 0){
			res = CC_STATIC_ELEMENT(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	template_object	
	 int CC_TEMPLATE_OBJECT(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_TEMPLATE_OBJECT) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_519 = pos;
		if ((lexget(pos).checkid(ID_CC_STATIC_OWNNER))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_STATIC_OWNNER(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_519; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_520 = pos;
			if ((lexget(pos).checkid(ID_CC_OBJECT_BLOCK))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_OBJECT_BLOCK(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_520; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_521 = pos;
				if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_WORD_EXP(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_521; }
			}
		}
		if (res >= 0){ 
			int stack_523 = pos;
			if ((lexget(pos).checkid(ID_CC_LC))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_TEMPLATE_OBJECT, ID_CC_LC);}
			if (res < 0){ pos = stack_523; }
			if (res >= 0){ 
				int stack_525 = pos;
				if ((lexget(pos).checkid(ID_CC_TEMPLATE_PARAMS))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_TEMPLATE_PARAMS(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_525; }
				if (res >= 0){ 
					int stack_527 = pos;
					if ((lexget(pos).checkid(ID_CC_RC))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_TEMPLATE_OBJECT, ID_CC_RC);}
					if (res < 0){ pos = stack_527; }
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_TEMPLATE_OBJECT);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_TEMPLATE_OBJECT(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_TEMPLATE_OBJECT)) > 0){
			res = CC_TEMPLATE_OBJECT(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	new_expression	
	 int CC_NEW_EXPRESSION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_NEW_EXPRESSION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_529 = pos;
		if ((lexget(pos).checkid(ID_CC_K_NEW))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_NEW_EXPRESSION, ID_CC_K_NEW);}
		if (res < 0){ pos = stack_529; }
		if (res >= 0){ 
			int stack_531 = pos;
			if ((lexget(pos).checkid(ID_CC_TEMPLATE_OBJECT))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_TEMPLATE_OBJECT(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_531; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_532 = pos;
				if ((lexget(pos).checkid(ID_CC_STATIC_OWNNER))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_STATIC_OWNNER(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_532; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_533 = pos;
					if ((lexget(pos).checkid(ID_CC_OBJECT_BLOCK))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_OBJECT_BLOCK(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_533; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						int stack_534 = pos;
						if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_WORD_EXP(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_534; }
					}
				}
			}
			if (res >= 0){ 
				int stack_536 = pos;
				if ((lexget(pos).checkid(ID_CC_LB))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_NEW_EXPRESSION, ID_CC_LB);}
				if (res < 0){ pos = stack_536; }
				if (res >= 0){ 
					int stack_538 = pos;
					if ((lexget(pos).checkid(ID_CC_ARRAY))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_ARRAY(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_538; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						res = 0;
					}
					if (res >= 0){ 
						int stack_541 = pos;
						if ((lexget(pos).checkid(ID_CC_RB))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else
						{res = -1;setRecord(ret, pos, ID_CC_NEW_EXPRESSION, ID_CC_RB);}
						if (res < 0){ pos = stack_541; }
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_NEW_EXPRESSION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_NEW_EXPRESSION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_NEW_EXPRESSION)) > 0){
			res = CC_NEW_EXPRESSION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	array_type	
	 int CC_ARRAY_TYPE(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_ARRAY_TYPE) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_543 = pos;
		if ((lexget(pos).checkid(ID_CC_ARRAY_TYPE))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_ARRAY_TYPE(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_543; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_544 = pos;
			if ((lexget(pos).checkid(ID_CC_TEMPLATE_OBJECT))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_TEMPLATE_OBJECT(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_544; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_545 = pos;
				if ((lexget(pos).checkid(ID_CC_STATIC_OWNNER))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_STATIC_OWNNER(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_545; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_546 = pos;
					if ((lexget(pos).checkid(ID_CC_OBJECT_BLOCK))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_OBJECT_BLOCK(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_546; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						int stack_547 = pos;
						if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_WORD_EXP(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_547; }
					}
				}
			}
		}
		if (res >= 0){ 
			int stack_549 = pos;
			if ((lexget(pos).checkid(ID_CC_LS))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_ARRAY_TYPE, ID_CC_LS);}
			if (res < 0){ pos = stack_549; }
			if (res >= 0){ 
				int stack_551 = pos;
				if ((lexget(pos).checkid(ID_CC_RS))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_ARRAY_TYPE, ID_CC_RS);}
				if (res < 0){ pos = stack_551; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_ARRAY_TYPE);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_ARRAY_TYPE(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_ARRAY_TYPE)) > 0){
			res = CC_ARRAY_TYPE(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	new_array	
	 int CC_NEW_ARRAY(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_NEW_ARRAY) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_553 = pos;
		int stack_554 = pos;
		if ((lexget(pos).checkid(ID_CC_NEW_ARRAY))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_NEW_ARRAY, ID_CC_NEW_ARRAY);}
		if (res < 0){ pos = stack_554; }
		if (res < 0){ pos = stack_553; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_555 = pos;
			if ((lexget(pos).checkid(ID_CC_TEMPLATE_OBJECT))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_TEMPLATE_OBJECT(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_555; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_556 = pos;
				if ((lexget(pos).checkid(ID_CC_STATIC_OWNNER))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_STATIC_OWNNER(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_556; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_557 = pos;
					if ((lexget(pos).checkid(ID_CC_OBJECT_BLOCK))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_OBJECT_BLOCK(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_557; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						int stack_558 = pos;
						if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_WORD_EXP(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_558; }
					}
				}
			}
		}
		if (res >= 0){ 
			int stack_560 = pos;
			if ((lexget(pos).checkid(ID_CC_LS))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_NEW_ARRAY, ID_CC_LS);}
			if (res < 0){ pos = stack_560; }
			if (res >= 0){ 
				int stack_562 = pos;
				if ((lexget(pos).checkid(ID_CC_OBJECT))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_OBJECT(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_562; }
				if (res >= 0){ 
					int stack_564 = pos;
					if ((lexget(pos).checkid(ID_CC_RS))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_NEW_ARRAY, ID_CC_RS);}
					if (res < 0){ pos = stack_564; }
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_NEW_ARRAY);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_NEW_ARRAY(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_NEW_ARRAY)) > 0){
			res = CC_NEW_ARRAY(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	newarray_expression	
	 int CC_NEWARRAY_EXPRESSION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_NEWARRAY_EXPRESSION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_566 = pos;
		if ((lexget(pos).checkid(ID_CC_K_NEW))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_NEWARRAY_EXPRESSION, ID_CC_K_NEW);}
		if (res < 0){ pos = stack_566; }
		if (res >= 0){ 
			int stack_568 = pos;
			if ((lexget(pos).checkid(ID_CC_NEW_ARRAY))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_NEW_ARRAY(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_568; }
		}
		
		lexget(ret).unlockfunction(ID_CC_NEWARRAY_EXPRESSION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_NEWARRAY_EXPRESSION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_NEWARRAY_EXPRESSION)) > 0){
			res = CC_NEWARRAY_EXPRESSION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	dynamic_ownner	
	 int CC_DYNAMIC_OWNNER(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_DYNAMIC_OWNNER) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_570 = pos;
		int stack_571 = pos;
		if ((lexget(pos).checkid(ID_CC_DYNAMIC_OWNNER))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_DYNAMIC_OWNNER, ID_CC_DYNAMIC_OWNNER);}
		if (res < 0){ pos = stack_571; }
		if (res < 0){ pos = stack_570; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_572 = pos;
			if ((lexget(pos).checkid(ID_CC_NEW_EXPRESSION))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_NEW_EXPRESSION(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_572; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_573 = pos;
				if ((lexget(pos).checkid(ID_CC_NEWARRAY_EXPRESSION))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_NEWARRAY_EXPRESSION(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_573; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_574 = pos;
					if ((lexget(pos).checkid(ID_CC_DYNAMIC_ELEMENT))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_DYNAMIC_ELEMENT(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_574; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						int stack_575 = pos;
						if ((lexget(pos).checkid(ID_CC_STATIC_ELEMENT))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_STATIC_ELEMENT(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_575; }
						if (res >= 0){
							pos += res;
							res = 0;
						}
						else{
							int stack_576 = pos;
							if ((lexget(pos).checkid(ID_CC_CALL_EXPRESSION))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else{
								res = CC_CALL_EXPRESSION(pos, _context);
								context.reduced |= _context.reduced;
								_context.reduced = 0;
							}
							if (res >= 0){
								pos += res;
								res = 0;
							}
							if (res < 0){ pos = stack_576; }
							if (res >= 0){
								pos += res;
								res = 0;
							}
							else{
								int stack_577 = pos;
								if ((lexget(pos).checkid(ID_CC_TEMPORARY_CLASS))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else{
									res = CC_TEMPORARY_CLASS(pos, _context);
									context.reduced |= _context.reduced;
									_context.reduced = 0;
								}
								if (res >= 0){
									pos += res;
									res = 0;
								}
								if (res < 0){ pos = stack_577; }
							}
						}
					}
				}
			}
		}
		if (res >= 0){ 
			int stack_579 = pos;
			if ((lexget(pos).checkid(ID_CC_DOT))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_DYNAMIC_OWNNER, ID_CC_DOT);}
			if (res < 0){ pos = stack_579; }
			if (res >= 0){ 
				int stack_581 = pos;
				if ((lexget(pos).checkid(ID_CC_META_OBJECT))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_META_OBJECT(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_581; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_DYNAMIC_OWNNER);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_DYNAMIC_OWNNER(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_DYNAMIC_OWNNER)) > 0){
			res = CC_DYNAMIC_OWNNER(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	dynamic_element	
	 int CC_DYNAMIC_ELEMENT(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_DYNAMIC_ELEMENT) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_583 = pos;
		int stack_584 = pos;
		if ((lexget(pos).checkid(ID_CC_DYNAMIC_ELEMENT))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_DYNAMIC_ELEMENT, ID_CC_DYNAMIC_ELEMENT);}
		if (res < 0){ pos = stack_584; }
		if (res < 0){ pos = stack_583; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_585 = pos;
			if ((lexget(pos).checkid(ID_CC_CALL_EXPRESSION))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_CALL_EXPRESSION(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_585; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_586 = pos;
				if ((lexget(pos).checkid(ID_CC_DYNAMIC_OWNNER))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_DYNAMIC_OWNNER(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_586; }
			}
		}
		if (res >= 0){ 
			int stack_588 = pos;
			if ((lexget(pos).checkid(ID_CC_LS))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_DYNAMIC_ELEMENT, ID_CC_LS);}
			if (res < 0){ pos = stack_588; }
			if (res >= 0){ 
				int stack_590 = pos;
				if ((lexget(pos).checkid(ID_CC_OBJECT))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_OBJECT(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_590; }
				if (res >= 0){ 
					int stack_592 = pos;
					if ((lexget(pos).checkid(ID_CC_RS))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_DYNAMIC_ELEMENT, ID_CC_RS);}
					if (res < 0){ pos = stack_592; }
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_DYNAMIC_ELEMENT);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_DYNAMIC_ELEMENT(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_DYNAMIC_ELEMENT)) > 0){
			res = CC_DYNAMIC_ELEMENT(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	call_expression	
	 int CC_CALL_EXPRESSION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_CALL_EXPRESSION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_594 = pos;
		if ((lexget(pos).checkid(ID_CC_DYNAMIC_OWNNER))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_DYNAMIC_OWNNER(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_594; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_595 = pos;
			if ((lexget(pos).checkid(ID_CC_STATIC_OWNNER))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_STATIC_OWNNER(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_595; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_596 = pos;
				if ((lexget(pos).checkid(ID_CC_META_OBJECT))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_META_OBJECT(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_596; }
			}
		}
		if (res >= 0){ 
			int stack_598 = pos;
			if ((lexget(pos).checkid(ID_CC_LB))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_CALL_EXPRESSION, ID_CC_LB);}
			if (res < 0){ pos = stack_598; }
			if (res >= 0){ 
				int stack_600 = pos;
				if ((lexget(pos).checkid(ID_CC_ARRAY))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_ARRAY(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_600; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					res = 0;
				}
				if (res >= 0){ 
					int stack_603 = pos;
					if ((lexget(pos).checkid(ID_CC_RB))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_CALL_EXPRESSION, ID_CC_RB);}
					if (res < 0){ pos = stack_603; }
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_CALL_EXPRESSION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_CALL_EXPRESSION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_CALL_EXPRESSION)) > 0){
			res = CC_CALL_EXPRESSION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	static_type	
	 int CC_STATIC_TYPE(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_STATIC_TYPE) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_605 = pos;
		if ((lexget(pos).checkid(ID_CC_TEMPLATE_OBJECT))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_TEMPLATE_OBJECT(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_605; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_606 = pos;
			if ((lexget(pos).checkid(ID_CC_ARRAY_TYPE))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_ARRAY_TYPE(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_606; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_607 = pos;
				if ((lexget(pos).checkid(ID_CC_STATIC_OWNNER))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_STATIC_OWNNER(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_607; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_608 = pos;
					if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_WORD_EXP(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_608; }
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_STATIC_TYPE);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_STATIC_TYPE(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_STATIC_TYPE)) > 0){
			res = CC_STATIC_TYPE(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	object_block	
	 int CC_OBJECT_BLOCK(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_OBJECT_BLOCK) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_610 = pos;
		if ((lexget(pos).checkid(ID_CC_LB))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_OBJECT_BLOCK, ID_CC_LB);}
		if (res < 0){ pos = stack_610; }
		if (res >= 0){ 
			int stack_612 = pos;
			int stack_613 = pos;
			if ((lexget(pos).checkid(ID_CC_OBJECT_BLOCK))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_OBJECT_BLOCK, ID_CC_OBJECT_BLOCK);}
			if (res < 0){ pos = stack_613; }
			if (res < 0){ pos = stack_612; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_614 = pos;
				if ((lexget(pos).checkid(ID_CC_OBJECT))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_OBJECT(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_614; }
			}
			if (res >= 0){ 
				int stack_616 = pos;
				if ((lexget(pos).checkid(ID_CC_RB))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_OBJECT_BLOCK, ID_CC_RB);}
				if (res < 0){ pos = stack_616; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_OBJECT_BLOCK);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_OBJECT_BLOCK(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_OBJECT_BLOCK)) > 0){
			res = CC_OBJECT_BLOCK(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	cast_object	
	 int CC_CAST_OBJECT(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_CAST_OBJECT) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_618 = pos;
		if ((lexget(pos).checkid(ID_CC_OBJECT_BLOCK))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_OBJECT_BLOCK(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_618; }
		if (res >= 0){ 
			int stack_620 = pos;
			if ((lexget(pos).checkid(ID_CC_NORMAL_OBJECT))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_NORMAL_OBJECT(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_620; }
		}
		
		lexget(ret).unlockfunction(ID_CC_CAST_OBJECT);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_CAST_OBJECT(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_CAST_OBJECT)) > 0){
			res = CC_CAST_OBJECT(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	return_expression	
	 int CC_RETURN_EXPRESSION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_RETURN_EXPRESSION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_622 = pos;
		if ((lexget(pos).checkid(ID_CC_K_RETURN))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_RETURN_EXPRESSION, ID_CC_K_RETURN);}
		if (res < 0){ pos = stack_622; }
		if (res >= 0){ 
			int stack_624 = pos;
			if ((lexget(pos).checkid(ID_CC_OBJECT))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_OBJECT(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_624; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				res = 0;
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_RETURN_EXPRESSION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_RETURN_EXPRESSION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_RETURN_EXPRESSION)) > 0){
			res = CC_RETURN_EXPRESSION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	throw_expression	
	 int CC_THROW_EXPRESSION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_THROW_EXPRESSION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_627 = pos;
		if ((lexget(pos).checkid(ID_CC_K_THROW))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_THROW_EXPRESSION, ID_CC_K_THROW);}
		if (res < 0){ pos = stack_627; }
		if (res >= 0){ 
			int stack_629 = pos;
			if ((lexget(pos).checkid(ID_CC_OBJECT))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_OBJECT(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_629; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				res = 0;
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_THROW_EXPRESSION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_THROW_EXPRESSION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_THROW_EXPRESSION)) > 0){
			res = CC_THROW_EXPRESSION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	normal_expression	
	 int CC_NORMAL_EXPRESSION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_NORMAL_EXPRESSION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_632 = pos;
		int stack_633 = pos;
		if ((lexget(pos).checkid(ID_CC_SYNCHRONIZED_EXPRESSION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_SYNCHRONIZED_EXPRESSION(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_633; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_634 = pos;
			if ((lexget(pos).checkid(ID_CC_IF_EXPRESSION))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_IF_EXPRESSION(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_634; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_635 = pos;
				if ((lexget(pos).checkid(ID_CC_FOR_EXPRESSION))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_FOR_EXPRESSION(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_635; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_636 = pos;
					if ((lexget(pos).checkid(ID_CC_WHILE_EXPRESSION))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_WHILE_EXPRESSION(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_636; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						int stack_637 = pos;
						if ((lexget(pos).checkid(ID_CC_DOWHILE_EXPRESSION))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_DOWHILE_EXPRESSION(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_637; }
						if (res >= 0){
							pos += res;
							res = 0;
						}
						else{
							int stack_638 = pos;
							if ((lexget(pos).checkid(ID_CC_SWITCH_EXPRESSION))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else{
								res = CC_SWITCH_EXPRESSION(pos, _context);
								context.reduced |= _context.reduced;
								_context.reduced = 0;
							}
							if (res >= 0){
								pos += res;
								res = 0;
							}
							if (res < 0){ pos = stack_638; }
							if (res >= 0){
								pos += res;
								res = 0;
							}
							else{
								int stack_639 = pos;
								if ((lexget(pos).checkid(ID_CC_EXCEPTION_EXPRESSION))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else{
									res = CC_EXCEPTION_EXPRESSION(pos, _context);
									context.reduced |= _context.reduced;
									_context.reduced = 0;
								}
								if (res >= 0){
									pos += res;
									res = 0;
								}
								if (res < 0){ pos = stack_639; }
								if (res >= 0){
									pos += res;
									res = 0;
								}
								else{
									int stack_640 = pos;
									if ((lexget(pos).checkid(ID_CC_DEF_VARIABLE_STATE))){
										pos += lexget(pos).tokenlength;
										res = 0;
									}
									else{
										res = CC_DEF_VARIABLE_STATE(pos, _context);
										context.reduced |= _context.reduced;
										_context.reduced = 0;
									}
									if (res >= 0){
										pos += res;
										res = 0;
									}
									if (res < 0){ pos = stack_640; }
									if (res >= 0){
										pos += res;
										res = 0;
									}
									else{
										int stack_641 = pos;
										if ((lexget(pos).checkid(ID_CC_FUNCTION))){
											pos += lexget(pos).tokenlength;
											res = 0;
										}
										else{
											res = CC_FUNCTION(pos, _context);
											context.reduced |= _context.reduced;
											_context.reduced = 0;
										}
										if (res >= 0){
											pos += res;
											res = 0;
										}
										if (res < 0){ pos = stack_641; }
									}
								}
							}
						}
					}
				}
			}
		}
		if (res < 0){ pos = stack_632; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_642 = pos;
			int stack_643 = pos;
			if ((lexget(pos).checkid(ID_CC_CLASS))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_CLASS(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_643; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_644 = pos;
				if ((lexget(pos).checkid(ID_CC_OBJECT))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_OBJECT(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_644; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_645 = pos;
					if ((lexget(pos).checkid(ID_CC_K_BREAK))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_NORMAL_EXPRESSION, ID_CC_K_BREAK);}
					if (res < 0){ pos = stack_645; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						int stack_646 = pos;
						if ((lexget(pos).checkid(ID_CC_K_CONTINUE))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else
						{res = -1;setRecord(ret, pos, ID_CC_NORMAL_EXPRESSION, ID_CC_K_CONTINUE);}
						if (res < 0){ pos = stack_646; }
						if (res >= 0){
							pos += res;
							res = 0;
						}
						else{
							int stack_647 = pos;
							if ((lexget(pos).checkid(ID_CC_THROW_EXPRESSION))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else{
								res = CC_THROW_EXPRESSION(pos, _context);
								context.reduced |= _context.reduced;
								_context.reduced = 0;
							}
							if (res >= 0){
								pos += res;
								res = 0;
							}
							if (res < 0){ pos = stack_647; }
							if (res >= 0){
								pos += res;
								res = 0;
							}
							else{
								int stack_648 = pos;
								if ((lexget(pos).checkid(ID_CC_RETURN_EXPRESSION))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else{
									res = CC_RETURN_EXPRESSION(pos, _context);
									context.reduced |= _context.reduced;
									_context.reduced = 0;
								}
								if (res >= 0){
									pos += res;
									res = 0;
								}
								if (res < 0){ pos = stack_648; }
							}
						}
					}
				}
			}
			if (res >= 0){ 
				int stack_650 = pos;
				if ((lexget(pos).checkid(ID_CC_LE))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_NORMAL_EXPRESSION, ID_CC_LE);}
				if (res < 0){ pos = stack_650; }
			}
			if (res < 0){ pos = stack_642; }
		}
		
		lexget(ret).unlockfunction(ID_CC_NORMAL_EXPRESSION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_NORMAL_EXPRESSION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_NORMAL_EXPRESSION)) > 0){
			res = CC_NORMAL_EXPRESSION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	normal_object	
	 int CC_NORMAL_OBJECT(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_NORMAL_OBJECT) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_652 = pos;
		if ((lexget(pos).checkid(ID_CC_CAST_OBJECT))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_CAST_OBJECT(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_652; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_653 = pos;
			if ((lexget(pos).checkid(ID_CC_INIT_LIST))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_INIT_LIST(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_653; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_654 = pos;
				if ((lexget(pos).checkid(ID_CC_CALL_EXPRESSION))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_CALL_EXPRESSION(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_654; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_655 = pos;
					if ((lexget(pos).checkid(ID_CC_DYNAMIC_ELEMENT))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_DYNAMIC_ELEMENT(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_655; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						int stack_656 = pos;
						if ((lexget(pos).checkid(ID_CC_DYNAMIC_OWNNER))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_DYNAMIC_OWNNER(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_656; }
						if (res >= 0){
							pos += res;
							res = 0;
						}
						else{
							int stack_657 = pos;
							if ((lexget(pos).checkid(ID_CC_TEMPORARY_CLASS))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else{
								res = CC_TEMPORARY_CLASS(pos, _context);
								context.reduced |= _context.reduced;
								_context.reduced = 0;
							}
							if (res >= 0){
								pos += res;
								res = 0;
							}
							if (res < 0){ pos = stack_657; }
							if (res >= 0){
								pos += res;
								res = 0;
							}
							else{
								int stack_658 = pos;
								if ((lexget(pos).checkid(ID_CC_NEWARRAY_EXPRESSION))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else{
									res = CC_NEWARRAY_EXPRESSION(pos, _context);
									context.reduced |= _context.reduced;
									_context.reduced = 0;
								}
								if (res >= 0){
									pos += res;
									res = 0;
								}
								if (res < 0){ pos = stack_658; }
								if (res >= 0){
									pos += res;
									res = 0;
								}
								else{
									int stack_659 = pos;
									if ((lexget(pos).checkid(ID_CC_NEW_EXPRESSION))){
										pos += lexget(pos).tokenlength;
										res = 0;
									}
									else{
										res = CC_NEW_EXPRESSION(pos, _context);
										context.reduced |= _context.reduced;
										_context.reduced = 0;
									}
									if (res >= 0){
										pos += res;
										res = 0;
									}
									if (res < 0){ pos = stack_659; }
									if (res >= 0){
										pos += res;
										res = 0;
									}
									else{
										int stack_660 = pos;
										if ((lexget(pos).checkid(ID_CC_TEMPLATE_OBJECT))){
											pos += lexget(pos).tokenlength;
											res = 0;
										}
										else{
											res = CC_TEMPLATE_OBJECT(pos, _context);
											context.reduced |= _context.reduced;
											_context.reduced = 0;
										}
										if (res >= 0){
											pos += res;
											res = 0;
										}
										if (res < 0){ pos = stack_660; }
										if (res >= 0){
											pos += res;
											res = 0;
										}
										else{
											int stack_661 = pos;
											if ((lexget(pos).checkid(ID_CC_STATIC_ELEMENT))){
												pos += lexget(pos).tokenlength;
												res = 0;
											}
											else{
												res = CC_STATIC_ELEMENT(pos, _context);
												context.reduced |= _context.reduced;
												_context.reduced = 0;
											}
											if (res >= 0){
												pos += res;
												res = 0;
											}
											if (res < 0){ pos = stack_661; }
											if (res >= 0){
												pos += res;
												res = 0;
											}
											else{
												int stack_662 = pos;
												if ((lexget(pos).checkid(ID_CC_STATIC_OWNNER))){
													pos += lexget(pos).tokenlength;
													res = 0;
												}
												else{
													res = CC_STATIC_OWNNER(pos, _context);
													context.reduced |= _context.reduced;
													_context.reduced = 0;
												}
												if (res >= 0){
													pos += res;
													res = 0;
												}
												if (res < 0){ pos = stack_662; }
												if (res >= 0){
													pos += res;
													res = 0;
												}
												else{
													int stack_663 = pos;
													if ((lexget(pos).checkid(ID_CC_OBJECT_BLOCK))){
														pos += lexget(pos).tokenlength;
														res = 0;
													}
													else{
														res = CC_OBJECT_BLOCK(pos, _context);
														context.reduced |= _context.reduced;
														_context.reduced = 0;
													}
													if (res >= 0){
														pos += res;
														res = 0;
													}
													if (res < 0){ pos = stack_663; }
													if (res >= 0){
														pos += res;
														res = 0;
													}
													else{
														int stack_664 = pos;
														if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
															pos += lexget(pos).tokenlength;
															res = 0;
														}
														else{
															res = CC_WORD_EXP(pos, _context);
															context.reduced |= _context.reduced;
															_context.reduced = 0;
														}
														if (res >= 0){
															pos += res;
															res = 0;
														}
														if (res < 0){ pos = stack_664; }
														if (res >= 0){
															pos += res;
															res = 0;
														}
														else{
															int stack_665 = pos;
															if ((lexget(pos).checkid(ID_CC_CONST_OBJECT))){
																pos += lexget(pos).tokenlength;
																res = 0;
															}
															else{
																res = CC_CONST_OBJECT(pos, _context);
																context.reduced |= _context.reduced;
																_context.reduced = 0;
															}
															if (res >= 0){
																pos += res;
																res = 0;
															}
															if (res < 0){ pos = stack_665; }
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_NORMAL_OBJECT);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_NORMAL_OBJECT(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_NORMAL_OBJECT)) > 0){
			res = CC_NORMAL_OBJECT(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	math_object	
	 int CC_MATH_OBJECT(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_MATH_OBJECT) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_667 = pos;
		if ((lexget(pos).checkid(ID_CC_COMPSET_OPERATION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_COMPSET_OPERATION(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_667; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_668 = pos;
			if ((lexget(pos).checkid(ID_CC_BINARY_EXPRESSION))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_BINARY_EXPRESSION(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_668; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_669 = pos;
				if ((lexget(pos).checkid(ID_CC_LOGICOR_OPERATION))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_LOGICOR_OPERATION(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_669; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_670 = pos;
					if ((lexget(pos).checkid(ID_CC_LOGICAND_OPERATION))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_LOGICAND_OPERATION(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_670; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						int stack_671 = pos;
						if ((lexget(pos).checkid(ID_CC_BITOR_OPERATION))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_BITOR_OPERATION(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_671; }
						if (res >= 0){
							pos += res;
							res = 0;
						}
						else{
							int stack_672 = pos;
							if ((lexget(pos).checkid(ID_CC_BITXOR_OPERATION))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else{
								res = CC_BITXOR_OPERATION(pos, _context);
								context.reduced |= _context.reduced;
								_context.reduced = 0;
							}
							if (res >= 0){
								pos += res;
								res = 0;
							}
							if (res < 0){ pos = stack_672; }
							if (res >= 0){
								pos += res;
								res = 0;
							}
							else{
								int stack_673 = pos;
								if ((lexget(pos).checkid(ID_CC_BITAND_OPERATION))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else{
									res = CC_BITAND_OPERATION(pos, _context);
									context.reduced |= _context.reduced;
									_context.reduced = 0;
								}
								if (res >= 0){
									pos += res;
									res = 0;
								}
								if (res < 0){ pos = stack_673; }
								if (res >= 0){
									pos += res;
									res = 0;
								}
								else{
									int stack_674 = pos;
									if ((lexget(pos).checkid(ID_CC_EQUALS_OPERATION))){
										pos += lexget(pos).tokenlength;
										res = 0;
									}
									else{
										res = CC_EQUALS_OPERATION(pos, _context);
										context.reduced |= _context.reduced;
										_context.reduced = 0;
									}
									if (res >= 0){
										pos += res;
										res = 0;
									}
									if (res < 0){ pos = stack_674; }
									if (res >= 0){
										pos += res;
										res = 0;
									}
									else{
										int stack_675 = pos;
										if ((lexget(pos).checkid(ID_CC_COMPARE_OPERATION))){
											pos += lexget(pos).tokenlength;
											res = 0;
										}
										else{
											res = CC_COMPARE_OPERATION(pos, _context);
											context.reduced |= _context.reduced;
											_context.reduced = 0;
										}
										if (res >= 0){
											pos += res;
											res = 0;
										}
										if (res < 0){ pos = stack_675; }
										if (res >= 0){
											pos += res;
											res = 0;
										}
										else{
											int stack_676 = pos;
											if ((lexget(pos).checkid(ID_CC_BITMOV_OPERATION))){
												pos += lexget(pos).tokenlength;
												res = 0;
											}
											else{
												res = CC_BITMOV_OPERATION(pos, _context);
												context.reduced |= _context.reduced;
												_context.reduced = 0;
											}
											if (res >= 0){
												pos += res;
												res = 0;
											}
											if (res < 0){ pos = stack_676; }
											if (res >= 0){
												pos += res;
												res = 0;
											}
											else{
												int stack_677 = pos;
												if ((lexget(pos).checkid(ID_CC_ADDSUB_OPERATION))){
													pos += lexget(pos).tokenlength;
													res = 0;
												}
												else{
													res = CC_ADDSUB_OPERATION(pos, _context);
													context.reduced |= _context.reduced;
													_context.reduced = 0;
												}
												if (res >= 0){
													pos += res;
													res = 0;
												}
												if (res < 0){ pos = stack_677; }
												if (res >= 0){
													pos += res;
													res = 0;
												}
												else{
													int stack_678 = pos;
													if ((lexget(pos).checkid(ID_CC_MULDIVMOD_OPERATION))){
														pos += lexget(pos).tokenlength;
														res = 0;
													}
													else{
														res = CC_MULDIVMOD_OPERATION(pos, _context);
														context.reduced |= _context.reduced;
														_context.reduced = 0;
													}
													if (res >= 0){
														pos += res;
														res = 0;
													}
													if (res < 0){ pos = stack_678; }
													if (res >= 0){
														pos += res;
														res = 0;
													}
													else{
														int stack_679 = pos;
														if ((lexget(pos).checkid(ID_CC_UNARY_OPERATION))){
															pos += lexget(pos).tokenlength;
															res = 0;
														}
														else{
															res = CC_UNARY_OPERATION(pos, _context);
															context.reduced |= _context.reduced;
															_context.reduced = 0;
														}
														if (res >= 0){
															pos += res;
															res = 0;
														}
														if (res < 0){ pos = stack_679; }
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_MATH_OBJECT);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_MATH_OBJECT(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_MATH_OBJECT)) > 0){
			res = CC_MATH_OBJECT(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	object	
	 int CC_OBJECT(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_OBJECT) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_681 = pos;
		if ((lexget(pos).checkid(ID_CC_MATH_OBJECT))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_MATH_OBJECT(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_681; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_682 = pos;
			if ((lexget(pos).checkid(ID_CC_NORMAL_OBJECT))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_NORMAL_OBJECT(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_682; }
		}
		
		lexget(ret).unlockfunction(ID_CC_OBJECT);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_OBJECT(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_OBJECT)) > 0){
			res = CC_OBJECT(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	temporary_class	
	 int CC_TEMPORARY_CLASS(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_TEMPORARY_CLASS) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_684 = pos;
		if ((lexget(pos).checkid(ID_CC_NEW_EXPRESSION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_NEW_EXPRESSION(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_684; }
		if (res >= 0){ 
			int stack_686 = pos;
			if ((lexget(pos).checkid(ID_CC_LL))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_TEMPORARY_CLASS, ID_CC_LL);}
			if (res < 0){ pos = stack_686; }
			if (res >= 0){ 
				int stack_688 = pos;
				if ((lexget(pos).checkid(ID_CC_CLASS_BODY))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_CLASS_BODY(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_688; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					res = 0;
				}
				if (res >= 0){ 
					int stack_691 = pos;
					if ((lexget(pos).checkid(ID_CC_LR))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_TEMPORARY_CLASS, ID_CC_LR);}
					if (res < 0){ pos = stack_691; }
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_TEMPORARY_CLASS);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_TEMPORARY_CLASS(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_TEMPORARY_CLASS)) > 0){
			res = CC_TEMPORARY_CLASS(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	array	
	 int CC_ARRAY(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_ARRAY) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_693 = pos;
		int stack_694 = pos;
		if ((lexget(pos).checkid(ID_CC_ARRAY))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_ARRAY, ID_CC_ARRAY);}
		if (res < 0){ pos = stack_694; }
		if (res >= 0){ 
			int stack_696 = pos;
			if ((lexget(pos).checkid(ID_CC_COMMA))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_ARRAY, ID_CC_COMMA);}
			if (res < 0){ pos = stack_696; }
		}
		if (res < 0){ pos = stack_693; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			res = 0;
		}
		if (res >= 0){ 
			int stack_699 = pos;
			if ((lexget(pos).checkid(ID_CC_OBJECT))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_OBJECT(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_699; }
		}
		
		lexget(ret).unlockfunction(ID_CC_ARRAY);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_ARRAY(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_ARRAY)) > 0){
			res = CC_ARRAY(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	template_params	
	 int CC_TEMPLATE_PARAMS(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_TEMPLATE_PARAMS) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_701 = pos;
		int stack_702 = pos;
		if ((lexget(pos).checkid(ID_CC_TEMPLATE_PARAMS))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_TEMPLATE_PARAMS, ID_CC_TEMPLATE_PARAMS);}
		if (res < 0){ pos = stack_702; }
		if (res >= 0){ 
			int stack_704 = pos;
			if ((lexget(pos).checkid(ID_CC_COMMA))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_TEMPLATE_PARAMS, ID_CC_COMMA);}
			if (res < 0){ pos = stack_704; }
		}
		if (res < 0){ pos = stack_701; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			res = 0;
		}
		if (res >= 0){ 
			int stack_707 = pos;
			if ((lexget(pos).checkid(ID_CC_STATIC_TYPE))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_STATIC_TYPE(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_707; }
		}
		
		lexget(ret).unlockfunction(ID_CC_TEMPLATE_PARAMS);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_TEMPLATE_PARAMS(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_TEMPLATE_PARAMS)) > 0){
			res = CC_TEMPLATE_PARAMS(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	init_list	
	 int CC_INIT_LIST(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_INIT_LIST) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_709 = pos;
		if ((lexget(pos).checkid(ID_CC_LL))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_INIT_LIST, ID_CC_LL);}
		if (res < 0){ pos = stack_709; }
		if (res >= 0){ 
			int stack_711 = pos;
			if ((lexget(pos).checkid(ID_CC_ARRAY))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_ARRAY(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_711; }
			if (res >= 0){ 
				int stack_713 = pos;
				if ((lexget(pos).checkid(ID_CC_LR))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_INIT_LIST, ID_CC_LR);}
				if (res < 0){ pos = stack_713; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_INIT_LIST);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_INIT_LIST(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_INIT_LIST)) > 0){
			res = CC_INIT_LIST(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	synchronized_expression	
	 int CC_SYNCHRONIZED_EXPRESSION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_SYNCHRONIZED_EXPRESSION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_715 = pos;
		if ((lexget(pos).checkid(ID_CC_K_SYNCHRONIZED))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_SYNCHRONIZED_EXPRESSION, ID_CC_K_SYNCHRONIZED);}
		if (res < 0){ pos = stack_715; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_716 = pos;
			if ((lexget(pos).checkid(ID_CC_K_SYNCHRONIZED_READ))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_SYNCHRONIZED_EXPRESSION, ID_CC_K_SYNCHRONIZED_READ);}
			if (res < 0){ pos = stack_716; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_717 = pos;
				if ((lexget(pos).checkid(ID_CC_K_SYNCHRONIZED_WRITE))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_SYNCHRONIZED_EXPRESSION, ID_CC_K_SYNCHRONIZED_WRITE);}
				if (res < 0){ pos = stack_717; }
			}
		}
		if (res >= 0){ 
			int stack_719 = pos;
			int stack_720 = pos;
			if ((lexget(pos).checkid(ID_CC_LB))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_SYNCHRONIZED_EXPRESSION, ID_CC_LB);}
			if (res < 0){ pos = stack_720; }
			if (res >= 0){ 
				int stack_722 = pos;
				if ((lexget(pos).checkid(ID_CC_STATIC_OWNNER))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_STATIC_OWNNER(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_722; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_723 = pos;
					if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_WORD_EXP(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_723; }
				}
				if (res >= 0){ 
					int stack_725 = pos;
					if ((lexget(pos).checkid(ID_CC_RB))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_SYNCHRONIZED_EXPRESSION, ID_CC_RB);}
					if (res < 0){ pos = stack_725; }
				}
			}
			if (res < 0){ pos = stack_719; }
			if (res >= 0){ 
				int stack_727 = pos;
				if ((lexget(pos).checkid(ID_CC_LL))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_SYNCHRONIZED_EXPRESSION, ID_CC_LL);}
				if (res < 0){ pos = stack_727; }
				if (res >= 0){ 
					int stack_729 = pos;
					if ((lexget(pos).checkid(ID_CC_STATEMENTS))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_STATEMENTS(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_729; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						res = 0;
					}
					if (res >= 0){ 
						int stack_732 = pos;
						if ((lexget(pos).checkid(ID_CC_LR))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else
						{res = -1;setRecord(ret, pos, ID_CC_SYNCHRONIZED_EXPRESSION, ID_CC_LR);}
						if (res < 0){ pos = stack_732; }
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_SYNCHRONIZED_EXPRESSION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_SYNCHRONIZED_EXPRESSION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_SYNCHRONIZED_EXPRESSION)) > 0){
			res = CC_SYNCHRONIZED_EXPRESSION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	if_expression	
	 int CC_IF_EXPRESSION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_IF_EXPRESSION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_734 = pos;
		if ((lexget(pos).checkid(ID_CC_K_IF))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_IF_EXPRESSION, ID_CC_K_IF);}
		if (res < 0){ pos = stack_734; }
		if (res >= 0){ 
			int stack_736 = pos;
			if ((lexget(pos).checkid(ID_CC_LB))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_IF_EXPRESSION, ID_CC_LB);}
			if (res < 0){ pos = stack_736; }
			if (res >= 0){ 
				int stack_738 = pos;
				if ((lexget(pos).checkid(ID_CC_OBJECT))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_OBJECT(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_738; }
				if (res >= 0){ 
					int stack_740 = pos;
					if ((lexget(pos).checkid(ID_CC_RB))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_IF_EXPRESSION, ID_CC_RB);}
					if (res < 0){ pos = stack_740; }
					if (res >= 0){ 
						int stack_742 = pos;
						if ((lexget(pos).checkid(ID_CC_STATEMENT))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_STATEMENT(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_742; }
						if (res >= 0){ 
							int stack_744 = pos;
							int stack_745 = pos;
							if ((lexget(pos).checkid(ID_CC_K_ELSE))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else
							{res = -1;setRecord(ret, pos, ID_CC_IF_EXPRESSION, ID_CC_K_ELSE);}
							if (res < 0){ pos = stack_745; }
							if (res >= 0){ 
								int stack_747 = pos;
								if ((lexget(pos).checkid(ID_CC_STATEMENT))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else{
									res = CC_STATEMENT(pos, _context);
									context.reduced |= _context.reduced;
									_context.reduced = 0;
								}
								if (res >= 0){
									pos += res;
									res = 0;
								}
								if (res < 0){ pos = stack_747; }
							}
							if (res < 0){ pos = stack_744; }
							if (res >= 0){
								pos += res;
								res = 0;
							}
							else{
								res = 0;
							}
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_IF_EXPRESSION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_IF_EXPRESSION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_IF_EXPRESSION)) > 0){
			res = CC_IF_EXPRESSION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	for_first_expression	
	 int CC_FOR_FIRST_EXPRESSION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_FOR_FIRST_EXPRESSION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_750 = pos;
		int stack_751 = pos;
		if ((lexget(pos).checkid(ID_CC_FOR_FIRST_EXPRESSION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_FOR_FIRST_EXPRESSION, ID_CC_FOR_FIRST_EXPRESSION);}
		if (res < 0){ pos = stack_751; }
		if (res >= 0){ 
			int stack_753 = pos;
			if ((lexget(pos).checkid(ID_CC_COMMA))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_FOR_FIRST_EXPRESSION, ID_CC_COMMA);}
			if (res < 0){ pos = stack_753; }
		}
		if (res < 0){ pos = stack_750; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			res = 0;
		}
		if (res >= 0){ 
			int stack_756 = pos;
			if ((lexget(pos).checkid(ID_CC_VARIABLE_DEF))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_VARIABLE_DEF(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_756; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_757 = pos;
				if ((lexget(pos).checkid(ID_CC_OBJECT))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_OBJECT(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_757; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_FOR_FIRST_EXPRESSION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_FOR_FIRST_EXPRESSION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_FOR_FIRST_EXPRESSION)) > 0){
			res = CC_FOR_FIRST_EXPRESSION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	for_last_expression	
	 int CC_FOR_LAST_EXPRESSION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_FOR_LAST_EXPRESSION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_759 = pos;
		int stack_760 = pos;
		if ((lexget(pos).checkid(ID_CC_FOR_LAST_EXPRESSION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_FOR_LAST_EXPRESSION, ID_CC_FOR_LAST_EXPRESSION);}
		if (res < 0){ pos = stack_760; }
		if (res >= 0){ 
			int stack_762 = pos;
			if ((lexget(pos).checkid(ID_CC_COMMA))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_FOR_LAST_EXPRESSION, ID_CC_COMMA);}
			if (res < 0){ pos = stack_762; }
		}
		if (res < 0){ pos = stack_759; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			res = 0;
		}
		if (res >= 0){ 
			int stack_765 = pos;
			if ((lexget(pos).checkid(ID_CC_OBJECT))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_OBJECT(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_765; }
		}
		
		lexget(ret).unlockfunction(ID_CC_FOR_LAST_EXPRESSION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_FOR_LAST_EXPRESSION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_FOR_LAST_EXPRESSION)) > 0){
			res = CC_FOR_LAST_EXPRESSION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	for_in_expression	
	 int CC_FOR_IN_EXPRESSION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_FOR_IN_EXPRESSION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		if ((lexget(pos).checkid(ID_CC_OBJECT))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_OBJECT(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		
		lexget(ret).unlockfunction(ID_CC_FOR_IN_EXPRESSION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_FOR_IN_EXPRESSION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_FOR_IN_EXPRESSION)) > 0){
			res = CC_FOR_IN_EXPRESSION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	for_expression	
	 int CC_FOR_EXPRESSION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_FOR_EXPRESSION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_768 = pos;
		if ((lexget(pos).checkid(ID_CC_K_FOR))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_FOR_EXPRESSION, ID_CC_K_FOR);}
		if (res < 0){ pos = stack_768; }
		if (res >= 0){ 
			int stack_770 = pos;
			if ((lexget(pos).checkid(ID_CC_LB))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_FOR_EXPRESSION, ID_CC_LB);}
			if (res < 0){ pos = stack_770; }
			if (res >= 0){ 
				int stack_772 = pos;
				if ((lexget(pos).checkid(ID_CC_FOR_FIRST_EXPRESSION))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_FOR_FIRST_EXPRESSION(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_772; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					res = 0;
				}
				if (res >= 0){ 
					int stack_775 = pos;
					if ((lexget(pos).checkid(ID_CC_LE))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_FOR_EXPRESSION, ID_CC_LE);}
					if (res < 0){ pos = stack_775; }
					if (res >= 0){ 
						int stack_777 = pos;
						if ((lexget(pos).checkid(ID_CC_FOR_IN_EXPRESSION))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_FOR_IN_EXPRESSION(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_777; }
						if (res >= 0){
							pos += res;
							res = 0;
						}
						else{
							res = 0;
						}
						if (res >= 0){ 
							int stack_780 = pos;
							if ((lexget(pos).checkid(ID_CC_LE))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else
							{res = -1;setRecord(ret, pos, ID_CC_FOR_EXPRESSION, ID_CC_LE);}
							if (res < 0){ pos = stack_780; }
							if (res >= 0){ 
								int stack_782 = pos;
								if ((lexget(pos).checkid(ID_CC_FOR_LAST_EXPRESSION))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else{
									res = CC_FOR_LAST_EXPRESSION(pos, _context);
									context.reduced |= _context.reduced;
									_context.reduced = 0;
								}
								if (res >= 0){
									pos += res;
									res = 0;
								}
								if (res < 0){ pos = stack_782; }
								if (res >= 0){
									pos += res;
									res = 0;
								}
								else{
									res = 0;
								}
								if (res >= 0){ 
									int stack_785 = pos;
									if ((lexget(pos).checkid(ID_CC_RB))){
										pos += lexget(pos).tokenlength;
										res = 0;
									}
									else
									{res = -1;setRecord(ret, pos, ID_CC_FOR_EXPRESSION, ID_CC_RB);}
									if (res < 0){ pos = stack_785; }
									if (res >= 0){ 
										int stack_787 = pos;
										if ((lexget(pos).checkid(ID_CC_STATEMENT))){
											pos += lexget(pos).tokenlength;
											res = 0;
										}
										else{
											res = CC_STATEMENT(pos, _context);
											context.reduced |= _context.reduced;
											_context.reduced = 0;
										}
										if (res >= 0){
											pos += res;
											res = 0;
										}
										if (res < 0){ pos = stack_787; }
									}
								}
							}
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_FOR_EXPRESSION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_FOR_EXPRESSION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_FOR_EXPRESSION)) > 0){
			res = CC_FOR_EXPRESSION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	while_expression	
	 int CC_WHILE_EXPRESSION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_WHILE_EXPRESSION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_789 = pos;
		if ((lexget(pos).checkid(ID_CC_K_WHILE))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_WHILE_EXPRESSION, ID_CC_K_WHILE);}
		if (res < 0){ pos = stack_789; }
		if (res >= 0){ 
			int stack_791 = pos;
			if ((lexget(pos).checkid(ID_CC_LB))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_WHILE_EXPRESSION, ID_CC_LB);}
			if (res < 0){ pos = stack_791; }
			if (res >= 0){ 
				int stack_793 = pos;
				if ((lexget(pos).checkid(ID_CC_OBJECT))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_OBJECT(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_793; }
				if (res >= 0){ 
					int stack_795 = pos;
					if ((lexget(pos).checkid(ID_CC_RB))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_WHILE_EXPRESSION, ID_CC_RB);}
					if (res < 0){ pos = stack_795; }
					if (res >= 0){ 
						int stack_797 = pos;
						if ((lexget(pos).checkid(ID_CC_STATEMENT))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_STATEMENT(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_797; }
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_WHILE_EXPRESSION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_WHILE_EXPRESSION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_WHILE_EXPRESSION)) > 0){
			res = CC_WHILE_EXPRESSION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	dowhile_expression	
	 int CC_DOWHILE_EXPRESSION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_DOWHILE_EXPRESSION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_799 = pos;
		if ((lexget(pos).checkid(ID_CC_K_DO))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_DOWHILE_EXPRESSION, ID_CC_K_DO);}
		if (res < 0){ pos = stack_799; }
		if (res >= 0){ 
			int stack_801 = pos;
			if ((lexget(pos).checkid(ID_CC_STATEMENT))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_STATEMENT(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_801; }
			if (res >= 0){ 
				int stack_803 = pos;
				if ((lexget(pos).checkid(ID_CC_K_WHILE))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_DOWHILE_EXPRESSION, ID_CC_K_WHILE);}
				if (res < 0){ pos = stack_803; }
				if (res >= 0){ 
					int stack_805 = pos;
					if ((lexget(pos).checkid(ID_CC_LB))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_DOWHILE_EXPRESSION, ID_CC_LB);}
					if (res < 0){ pos = stack_805; }
					if (res >= 0){ 
						int stack_807 = pos;
						if ((lexget(pos).checkid(ID_CC_OBJECT))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_OBJECT(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_807; }
						if (res >= 0){ 
							int stack_809 = pos;
							if ((lexget(pos).checkid(ID_CC_RB))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else
							{res = -1;setRecord(ret, pos, ID_CC_DOWHILE_EXPRESSION, ID_CC_RB);}
							if (res < 0){ pos = stack_809; }
							if (res >= 0){ 
								int stack_811 = pos;
								if ((lexget(pos).checkid(ID_CC_LE))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else
								{res = -1;setRecord(ret, pos, ID_CC_DOWHILE_EXPRESSION, ID_CC_LE);}
								if (res < 0){ pos = stack_811; }
							}
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_DOWHILE_EXPRESSION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_DOWHILE_EXPRESSION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_DOWHILE_EXPRESSION)) > 0){
			res = CC_DOWHILE_EXPRESSION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	case_expression	
	 int CC_CASE_EXPRESSION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_CASE_EXPRESSION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_813 = pos;
		if ((lexget(pos).checkid(ID_CC_CASE_EXPRESSION))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_CASE_EXPRESSION, ID_CC_CASE_EXPRESSION);}
		if (res < 0){ pos = stack_813; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			res = 0;
		}
		if (res >= 0){ 
			int stack_816 = pos;
			int stack_817 = pos;
			if ((lexget(pos).checkid(ID_CC_K_CASE))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_CASE_EXPRESSION, ID_CC_K_CASE);}
			if (res < 0){ pos = stack_817; }
			if (res >= 0){ 
				int stack_819 = pos;
				if ((lexget(pos).checkid(ID_CC_OBJECT))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_OBJECT(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_819; }
			}
			if (res < 0){ pos = stack_816; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_820 = pos;
				if ((lexget(pos).checkid(ID_CC_K_DEFAULT))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_CASE_EXPRESSION, ID_CC_K_DEFAULT);}
				if (res < 0){ pos = stack_820; }
			}
			if (res >= 0){ 
				int stack_822 = pos;
				if ((lexget(pos).checkid(ID_CC_COLON))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_CASE_EXPRESSION, ID_CC_COLON);}
				if (res < 0){ pos = stack_822; }
				if (res >= 0){ 
					int stack_824 = pos;
					if ((lexget(pos).checkid(ID_CC_STATEMENTS))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_STATEMENTS(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_824; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						res = 0;
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_CASE_EXPRESSION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_CASE_EXPRESSION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_CASE_EXPRESSION)) > 0){
			res = CC_CASE_EXPRESSION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	switch_expression	
	 int CC_SWITCH_EXPRESSION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_SWITCH_EXPRESSION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_827 = pos;
		if ((lexget(pos).checkid(ID_CC_K_SWITCH))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_SWITCH_EXPRESSION, ID_CC_K_SWITCH);}
		if (res < 0){ pos = stack_827; }
		if (res >= 0){ 
			int stack_829 = pos;
			if ((lexget(pos).checkid(ID_CC_LB))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_SWITCH_EXPRESSION, ID_CC_LB);}
			if (res < 0){ pos = stack_829; }
			if (res >= 0){ 
				int stack_831 = pos;
				if ((lexget(pos).checkid(ID_CC_OBJECT))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_OBJECT(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_831; }
				if (res >= 0){ 
					int stack_833 = pos;
					if ((lexget(pos).checkid(ID_CC_RB))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_SWITCH_EXPRESSION, ID_CC_RB);}
					if (res < 0){ pos = stack_833; }
					if (res >= 0){ 
						int stack_835 = pos;
						if ((lexget(pos).checkid(ID_CC_LL))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else
						{res = -1;setRecord(ret, pos, ID_CC_SWITCH_EXPRESSION, ID_CC_LL);}
						if (res < 0){ pos = stack_835; }
						if (res >= 0){ 
							int stack_837 = pos;
							if ((lexget(pos).checkid(ID_CC_CASE_EXPRESSION))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else{
								res = CC_CASE_EXPRESSION(pos, _context);
								context.reduced |= _context.reduced;
								_context.reduced = 0;
							}
							if (res >= 0){
								pos += res;
								res = 0;
							}
							if (res < 0){ pos = stack_837; }
							if (res >= 0){ 
								int stack_839 = pos;
								if ((lexget(pos).checkid(ID_CC_LR))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else
								{res = -1;setRecord(ret, pos, ID_CC_SWITCH_EXPRESSION, ID_CC_LR);}
								if (res < 0){ pos = stack_839; }
							}
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_SWITCH_EXPRESSION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_SWITCH_EXPRESSION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_SWITCH_EXPRESSION)) > 0){
			res = CC_SWITCH_EXPRESSION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	catch_body	
	 int CC_CATCH_BODY(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_CATCH_BODY) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_841 = pos;
		if ((lexget(pos).checkid(ID_CC_CATCH_BODY))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_CATCH_BODY, ID_CC_CATCH_BODY);}
		if (res < 0){ pos = stack_841; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			res = 0;
		}
		if (res >= 0){ 
			int stack_844 = pos;
			if ((lexget(pos).checkid(ID_CC_K_CATCH))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_CATCH_BODY, ID_CC_K_CATCH);}
			if (res < 0){ pos = stack_844; }
			if (res >= 0){ 
				int stack_846 = pos;
				if ((lexget(pos).checkid(ID_CC_LB))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_CATCH_BODY, ID_CC_LB);}
				if (res < 0){ pos = stack_846; }
				if (res >= 0){ 
					int stack_848 = pos;
					if ((lexget(pos).checkid(ID_CC_OBJECT))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_OBJECT(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_848; }
					if (res >= 0){ 
						int stack_850 = pos;
						if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_WORD_EXP(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_850; }
						if (res >= 0){ 
							int stack_852 = pos;
							if ((lexget(pos).checkid(ID_CC_RB))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else
							{res = -1;setRecord(ret, pos, ID_CC_CATCH_BODY, ID_CC_RB);}
							if (res < 0){ pos = stack_852; }
							if (res >= 0){ 
								int stack_854 = pos;
								if ((lexget(pos).checkid(ID_CC_LL))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else
								{res = -1;setRecord(ret, pos, ID_CC_CATCH_BODY, ID_CC_LL);}
								if (res < 0){ pos = stack_854; }
								if (res >= 0){ 
									int stack_856 = pos;
									if ((lexget(pos).checkid(ID_CC_STATEMENTS))){
										pos += lexget(pos).tokenlength;
										res = 0;
									}
									else{
										res = CC_STATEMENTS(pos, _context);
										context.reduced |= _context.reduced;
										_context.reduced = 0;
									}
									if (res >= 0){
										pos += res;
										res = 0;
									}
									if (res < 0){ pos = stack_856; }
									if (res >= 0){
										pos += res;
										res = 0;
									}
									else{
										res = 0;
									}
									if (res >= 0){ 
										int stack_859 = pos;
										if ((lexget(pos).checkid(ID_CC_LR))){
											pos += lexget(pos).tokenlength;
											res = 0;
										}
										else
										{res = -1;setRecord(ret, pos, ID_CC_CATCH_BODY, ID_CC_LR);}
										if (res < 0){ pos = stack_859; }
									}
								}
							}
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_CATCH_BODY);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_CATCH_BODY(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_CATCH_BODY)) > 0){
			res = CC_CATCH_BODY(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	exception_expression	
	 int CC_EXCEPTION_EXPRESSION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_EXCEPTION_EXPRESSION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_861 = pos;
		if ((lexget(pos).checkid(ID_CC_K_TRY))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_EXCEPTION_EXPRESSION, ID_CC_K_TRY);}
		if (res < 0){ pos = stack_861; }
		if (res >= 0){ 
			int stack_863 = pos;
			if ((lexget(pos).checkid(ID_CC_LL))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_EXCEPTION_EXPRESSION, ID_CC_LL);}
			if (res < 0){ pos = stack_863; }
			if (res >= 0){ 
				int stack_865 = pos;
				if ((lexget(pos).checkid(ID_CC_STATEMENTS))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_STATEMENTS(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_865; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					res = 0;
				}
				if (res >= 0){ 
					int stack_868 = pos;
					if ((lexget(pos).checkid(ID_CC_LR))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_EXCEPTION_EXPRESSION, ID_CC_LR);}
					if (res < 0){ pos = stack_868; }
					if (res >= 0){ 
						int stack_870 = pos;
						if ((lexget(pos).checkid(ID_CC_CATCH_BODY))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_CATCH_BODY(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_870; }
						if (res >= 0){
							pos += res;
							res = 0;
						}
						else{
							res = 0;
						}
						if (res >= 0){ 
							int stack_873 = pos;
							int stack_874 = pos;
							if ((lexget(pos).checkid(ID_CC_K_FINALLY))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else
							{res = -1;setRecord(ret, pos, ID_CC_EXCEPTION_EXPRESSION, ID_CC_K_FINALLY);}
							if (res < 0){ pos = stack_874; }
							if (res >= 0){ 
								int stack_876 = pos;
								if ((lexget(pos).checkid(ID_CC_LL))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else
								{res = -1;setRecord(ret, pos, ID_CC_EXCEPTION_EXPRESSION, ID_CC_LL);}
								if (res < 0){ pos = stack_876; }
								if (res >= 0){ 
									int stack_878 = pos;
									if ((lexget(pos).checkid(ID_CC_STATEMENTS))){
										pos += lexget(pos).tokenlength;
										res = 0;
									}
									else{
										res = CC_STATEMENTS(pos, _context);
										context.reduced |= _context.reduced;
										_context.reduced = 0;
									}
									if (res >= 0){
										pos += res;
										res = 0;
									}
									if (res < 0){ pos = stack_878; }
									if (res >= 0){
										pos += res;
										res = 0;
									}
									else{
										res = 0;
									}
									if (res >= 0){ 
										int stack_881 = pos;
										if ((lexget(pos).checkid(ID_CC_LR))){
											pos += lexget(pos).tokenlength;
											res = 0;
										}
										else
										{res = -1;setRecord(ret, pos, ID_CC_EXCEPTION_EXPRESSION, ID_CC_LR);}
										if (res < 0){ pos = stack_881; }
									}
								}
							}
							if (res < 0){ pos = stack_873; }
							if (res >= 0){
								pos += res;
								res = 0;
							}
							else{
								res = 0;
							}
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_EXCEPTION_EXPRESSION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_EXCEPTION_EXPRESSION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_EXCEPTION_EXPRESSION)) > 0){
			res = CC_EXCEPTION_EXPRESSION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	statement	
	 int CC_STATEMENT(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_STATEMENT) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_884 = pos;
		int stack_885 = pos;
		if ((lexget(pos).checkid(ID_CC_LL))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_STATEMENT, ID_CC_LL);}
		if (res < 0){ pos = stack_885; }
		if (res >= 0){ 
			int stack_887 = pos;
			if ((lexget(pos).checkid(ID_CC_STATEMENTS))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_STATEMENTS(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_887; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				res = 0;
			}
			if (res >= 0){ 
				int stack_890 = pos;
				if ((lexget(pos).checkid(ID_CC_LR))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_STATEMENT, ID_CC_LR);}
				if (res < 0){ pos = stack_890; }
			}
		}
		if (res < 0){ pos = stack_884; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_891 = pos;
			if ((lexget(pos).checkid(ID_CC_NORMAL_EXPRESSION))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_NORMAL_EXPRESSION(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_891; }
		}
		
		lexget(ret).unlockfunction(ID_CC_STATEMENT);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_STATEMENT(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_STATEMENT)) > 0){
			res = CC_STATEMENT(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	statements	
	 int CC_STATEMENTS(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_STATEMENTS) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_893 = pos;
		if ((lexget(pos).checkid(ID_CC_STATEMENTS))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_STATEMENTS, ID_CC_STATEMENTS);}
		if (res < 0){ pos = stack_893; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			res = 0;
		}
		if (res >= 0){ 
			int stack_896 = pos;
			if ((lexget(pos).checkid(ID_CC_STATEMENT))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_STATEMENT(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_896; }
		}
		
		lexget(ret).unlockfunction(ID_CC_STATEMENTS);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_STATEMENTS(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_STATEMENTS)) > 0){
			res = CC_STATEMENTS(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	variable_init	
	 int CC_VARIABLE_INIT(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_VARIABLE_INIT) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_898 = pos;
		if ((lexget(pos).checkid(ID_CC_VARIABLE_INIT))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_VARIABLE_INIT, ID_CC_VARIABLE_INIT);}
		if (res >= 0){ 
			int stack_900 = pos;
			if ((lexget(pos).checkid(ID_CC_COMMA))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_VARIABLE_INIT, ID_CC_COMMA);}
			if (res < 0){ pos = stack_900; }
		}
		if (res < 0){ pos = stack_898; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			res = 0;
		}
		if (res >= 0){ 
			int stack_903 = pos;
			int stack_904 = pos;
			if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_WORD_EXP(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_904; }
			if (res >= 0){ 
				int stack_906 = pos;
				int stack_907 = pos;
				if ((lexget(pos).checkid(ID_CC_LS))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_VARIABLE_INIT, ID_CC_LS);}
				if (res < 0){ pos = stack_907; }
				if (res >= 0){ 
					int stack_909 = pos;
					if ((lexget(pos).checkid(ID_CC_RS))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_VARIABLE_INIT, ID_CC_RS);}
					if (res < 0){ pos = stack_909; }
				}
				if (res < 0){ pos = stack_906; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					res = 0;
				}
			}
			if (res < 0){ pos = stack_903; }
			if (res >= 0){ 
				int stack_912 = pos;
				int stack_913 = pos;
				if ((lexget(pos).checkid(ID_CC_MOV))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_VARIABLE_INIT, ID_CC_MOV);}
				if (res < 0){ pos = stack_913; }
				if (res >= 0){ 
					int stack_915 = pos;
					if ((lexget(pos).checkid(ID_CC_OBJECT))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_OBJECT(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_915; }
				}
				if (res < 0){ pos = stack_912; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					res = 0;
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_VARIABLE_INIT);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_VARIABLE_INIT(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_VARIABLE_INIT)) > 0){
			res = CC_VARIABLE_INIT(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	variable_def	
	 int CC_VARIABLE_DEF(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_VARIABLE_DEF) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_918 = pos;
		if ((lexget(pos).checkid(ID_CC_K_STATIC))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_VARIABLE_DEF, ID_CC_K_STATIC);}
		if (res < 0){ pos = stack_918; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			res = 0;
		}
		if (res >= 0){ 
			int stack_921 = pos;
			if ((lexget(pos).checkid(ID_CC_K_CONST))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_VARIABLE_DEF, ID_CC_K_CONST);}
			if (res < 0){ pos = stack_921; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				res = 0;
			}
			if (res >= 0){ 
				int stack_924 = pos;
				if ((lexget(pos).checkid(ID_CC_STATIC_TYPE))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_STATIC_TYPE(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_924; }
				if (res >= 0){ 
					int stack_926 = pos;
					if ((lexget(pos).checkid(ID_CC_VARIABLE_INIT))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_VARIABLE_INIT(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_926; }
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_VARIABLE_DEF);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_VARIABLE_DEF(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_VARIABLE_DEF)) > 0){
			res = CC_VARIABLE_DEF(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	def_variable_state	
	 int CC_DEF_VARIABLE_STATE(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_DEF_VARIABLE_STATE) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_928 = pos;
		if ((lexget(pos).checkid(ID_CC_VARIABLE_DEF))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_VARIABLE_DEF(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_928; }
		if (res >= 0){ 
			int stack_930 = pos;
			if ((lexget(pos).checkid(ID_CC_LE))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_DEF_VARIABLE_STATE, ID_CC_LE);}
			if (res < 0){ pos = stack_930; }
		}
		
		lexget(ret).unlockfunction(ID_CC_DEF_VARIABLE_STATE);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_DEF_VARIABLE_STATE(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_DEF_VARIABLE_STATE)) > 0){
			res = CC_DEF_VARIABLE_STATE(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	params_def	
	 int CC_PARAMS_DEF(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_PARAMS_DEF) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_932 = pos;
		int stack_933 = pos;
		if ((lexget(pos).checkid(ID_CC_PARAMS_DEF))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_PARAMS_DEF, ID_CC_PARAMS_DEF);}
		if (res < 0){ pos = stack_933; }
		if (res >= 0){ 
			int stack_935 = pos;
			if ((lexget(pos).checkid(ID_CC_COMMA))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_PARAMS_DEF, ID_CC_COMMA);}
			if (res < 0){ pos = stack_935; }
		}
		if (res < 0){ pos = stack_932; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			res = 0;
		}
		if (res >= 0){ 
			int stack_938 = pos;
			if ((lexget(pos).checkid(ID_CC_STATIC_TYPE))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_STATIC_TYPE(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_938; }
			if (res >= 0){ 
				int stack_940 = pos;
				if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_WORD_EXP(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_940; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					res = 0;
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_PARAMS_DEF);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_PARAMS_DEF(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_PARAMS_DEF)) > 0){
			res = CC_PARAMS_DEF(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	nativeparams_def	
	 int CC_NATIVEPARAMS_DEF(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_NATIVEPARAMS_DEF) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_943 = pos;
		int stack_944 = pos;
		if ((lexget(pos).checkid(ID_CC_NATIVEPARAMS_DEF))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_NATIVEPARAMS_DEF, ID_CC_NATIVEPARAMS_DEF);}
		if (res < 0){ pos = stack_944; }
		if (res >= 0){ 
			int stack_946 = pos;
			if ((lexget(pos).checkid(ID_CC_COMMA))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_NATIVEPARAMS_DEF, ID_CC_COMMA);}
			if (res < 0){ pos = stack_946; }
		}
		if (res < 0){ pos = stack_943; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			res = 0;
		}
		if (res >= 0){ 
			int stack_949 = pos;
			int stack_950 = pos;
			if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_WORD_EXP(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_950; }
			if (res >= 0){ 
				int stack_952 = pos;
				if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_WORD_EXP(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_952; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					res = 0;
				}
			}
			if (res < 0){ pos = stack_949; }
		}
		
		lexget(ret).unlockfunction(ID_CC_NATIVEPARAMS_DEF);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_NATIVEPARAMS_DEF(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_NATIVEPARAMS_DEF)) > 0){
			res = CC_NATIVEPARAMS_DEF(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	filearray	
	 int CC_FILEARRAY(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_FILEARRAY) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_955 = pos;
		int stack_956 = pos;
		if ((lexget(pos).checkid(ID_CC_FILEARRAY))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_FILEARRAY, ID_CC_FILEARRAY);}
		if (res < 0){ pos = stack_956; }
		if (res >= 0){ 
			int stack_958 = pos;
			if ((lexget(pos).checkid(ID_CC_COMMA))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_FILEARRAY, ID_CC_COMMA);}
			if (res < 0){ pos = stack_958; }
		}
		if (res < 0){ pos = stack_955; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			res = 0;
		}
		if (res >= 0){ 
			int stack_961 = pos;
			if ((lexget(pos).checkid(ID_CC_STRING))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_FILEARRAY, ID_CC_STRING);}
			if (res < 0){ pos = stack_961; }
		}
		
		lexget(ret).unlockfunction(ID_CC_FILEARRAY);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_FILEARRAY(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_FILEARRAY)) > 0){
			res = CC_FILEARRAY(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	require	
	 int CC_REQUIRE(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_REQUIRE) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_963 = pos;
		if ((lexget(pos).checkid(ID_CC_K_REQUIRE))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_REQUIRE, ID_CC_K_REQUIRE);}
		if (res < 0){ pos = stack_963; }
		if (res >= 0){ 
			int stack_965 = pos;
			if ((lexget(pos).checkid(ID_CC_LB))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_REQUIRE, ID_CC_LB);}
			if (res < 0){ pos = stack_965; }
			if (res >= 0){ 
				int stack_967 = pos;
				if ((lexget(pos).checkid(ID_CC_FILEARRAY))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_FILEARRAY(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_967; }
				if (res >= 0){ 
					int stack_969 = pos;
					if ((lexget(pos).checkid(ID_CC_RB))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_REQUIRE, ID_CC_RB);}
					if (res < 0){ pos = stack_969; }
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_REQUIRE);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_REQUIRE(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_REQUIRE)) > 0){
			res = CC_REQUIRE(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	include	
	 int CC_INCLUDE(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_INCLUDE) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_971 = pos;
		if ((lexget(pos).checkid(ID_CC_K_INCLUDE))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_INCLUDE, ID_CC_K_INCLUDE);}
		if (res < 0){ pos = stack_971; }
		if (res >= 0){ 
			int stack_973 = pos;
			if ((lexget(pos).checkid(ID_CC_LB))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_INCLUDE, ID_CC_LB);}
			if (res < 0){ pos = stack_973; }
			if (res >= 0){ 
				int stack_975 = pos;
				if ((lexget(pos).checkid(ID_CC_FILEARRAY))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_FILEARRAY(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_975; }
				if (res >= 0){ 
					int stack_977 = pos;
					if ((lexget(pos).checkid(ID_CC_RB))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_INCLUDE, ID_CC_RB);}
					if (res < 0){ pos = stack_977; }
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_INCLUDE);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_INCLUDE(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_INCLUDE)) > 0){
			res = CC_INCLUDE(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	package_name	
	 int CC_PACKAGE_NAME(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_PACKAGE_NAME) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_979 = pos;
		int stack_980 = pos;
		if ((lexget(pos).checkid(ID_CC_PACKAGE_NAME))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_PACKAGE_NAME, ID_CC_PACKAGE_NAME);}
		if (res < 0){ pos = stack_980; }
		if (res >= 0){ 
			int stack_982 = pos;
			if ((lexget(pos).checkid(ID_CC_DOT))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_PACKAGE_NAME, ID_CC_DOT);}
			if (res < 0){ pos = stack_982; }
			if (res >= 0){ 
				int stack_984 = pos;
				if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_WORD_EXP(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_984; }
			}
		}
		if (res < 0){ pos = stack_979; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_985 = pos;
			int stack_986 = pos;
			if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_WORD_EXP(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_986; }
			if (res < 0){ pos = stack_985; }
		}
		
		lexget(ret).unlockfunction(ID_CC_PACKAGE_NAME);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_PACKAGE_NAME(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_PACKAGE_NAME)) > 0){
			res = CC_PACKAGE_NAME(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	package_array	
	 int CC_PACKAGE_ARRAY(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_PACKAGE_ARRAY) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_988 = pos;
		int stack_989 = pos;
		if ((lexget(pos).checkid(ID_CC_PACKAGE_ARRAY))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_PACKAGE_ARRAY, ID_CC_PACKAGE_ARRAY);}
		if (res < 0){ pos = stack_989; }
		if (res < 0){ pos = stack_988; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			res = 0;
		}
		if (res >= 0){ 
			int stack_992 = pos;
			if ((lexget(pos).checkid(ID_CC_PACKAGE_NAME))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_PACKAGE_NAME(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_992; }
			if (res >= 0){ 
				int stack_994 = pos;
				if ((lexget(pos).checkid(ID_CC_LE))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_PACKAGE_ARRAY, ID_CC_LE);}
				if (res < 0){ pos = stack_994; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_PACKAGE_ARRAY);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_PACKAGE_ARRAY(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_PACKAGE_ARRAY)) > 0){
			res = CC_PACKAGE_ARRAY(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	using	
	 int CC_USING(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_USING) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_996 = pos;
		if ((lexget(pos).checkid(ID_CC_K_USING))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_USING, ID_CC_K_USING);}
		if (res < 0){ pos = stack_996; }
		if (res >= 0){ 
			int stack_998 = pos;
			if ((lexget(pos).checkid(ID_CC_LL))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_USING, ID_CC_LL);}
			if (res < 0){ pos = stack_998; }
			if (res >= 0){ 
				int stack_1000 = pos;
				if ((lexget(pos).checkid(ID_CC_PACKAGE_ARRAY))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_PACKAGE_ARRAY(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_1000; }
				if (res >= 0){ 
					int stack_1002 = pos;
					if ((lexget(pos).checkid(ID_CC_LR))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_USING, ID_CC_LR);}
					if (res < 0){ pos = stack_1002; }
					if (res >= 0){ 
						int stack_1004 = pos;
						if ((lexget(pos).checkid(ID_CC_LE))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else
						{res = -1;setRecord(ret, pos, ID_CC_USING, ID_CC_LE);}
						if (res < 0){ pos = stack_1004; }
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_USING);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_USING(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_USING)) > 0){
			res = CC_USING(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	function	
	 int CC_FUNCTION(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_FUNCTION) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1006 = pos;
		int stack_1007 = pos;
		if ((lexget(pos).checkid(ID_CC_K_FINAL))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_FUNCTION, ID_CC_K_FINAL);}
		if (res < 0){ pos = stack_1007; }
		if (res >= 0){ 
			int stack_1009 = pos;
			if ((lexget(pos).checkid(ID_CC_K_STATIC))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_FUNCTION, ID_CC_K_STATIC);}
			if (res < 0){ pos = stack_1009; }
		}
		if (res < 0){ pos = stack_1006; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_1010 = pos;
			int stack_1011 = pos;
			if ((lexget(pos).checkid(ID_CC_K_STATIC))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_FUNCTION, ID_CC_K_STATIC);}
			if (res < 0){ pos = stack_1011; }
			if (res >= 0){ 
				int stack_1013 = pos;
				if ((lexget(pos).checkid(ID_CC_K_FINAL))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_FUNCTION, ID_CC_K_FINAL);}
				if (res < 0){ pos = stack_1013; }
			}
			if (res < 0){ pos = stack_1010; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_1014 = pos;
				if ((lexget(pos).checkid(ID_CC_K_FINAL))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_FUNCTION, ID_CC_K_FINAL);}
				if (res < 0){ pos = stack_1014; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_1015 = pos;
					if ((lexget(pos).checkid(ID_CC_K_STATIC))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_FUNCTION, ID_CC_K_STATIC);}
					if (res < 0){ pos = stack_1015; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						res = 0;
					}
				}
			}
		}
		if (res >= 0){ 
			int stack_1018 = pos;
			if ((lexget(pos).checkid(ID_CC_STATIC_TYPE))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_STATIC_TYPE(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_1018; }
			if (res >= 0){ 
				int stack_1020 = pos;
				if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_WORD_EXP(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_1020; }
				if (res >= 0){ 
					int stack_1022 = pos;
					if ((lexget(pos).checkid(ID_CC_LB))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_FUNCTION, ID_CC_LB);}
					if (res < 0){ pos = stack_1022; }
					if (res >= 0){ 
						int stack_1024 = pos;
						if ((lexget(pos).checkid(ID_CC_PARAMS_DEF))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_PARAMS_DEF(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_1024; }
						if (res >= 0){
							pos += res;
							res = 0;
						}
						else{
							res = 0;
						}
						if (res >= 0){ 
							int stack_1027 = pos;
							if ((lexget(pos).checkid(ID_CC_RB))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else
							{res = -1;setRecord(ret, pos, ID_CC_FUNCTION, ID_CC_RB);}
							if (res < 0){ pos = stack_1027; }
							if (res >= 0){ 
								int stack_1029 = pos;
								if ((lexget(pos).checkid(ID_CC_LL))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else
								{res = -1;setRecord(ret, pos, ID_CC_FUNCTION, ID_CC_LL);}
								if (res < 0){ pos = stack_1029; }
								if (res >= 0){ 
									int stack_1031 = pos;
									if ((lexget(pos).checkid(ID_CC_STATEMENTS))){
										pos += lexget(pos).tokenlength;
										res = 0;
									}
									else{
										res = CC_STATEMENTS(pos, _context);
										context.reduced |= _context.reduced;
										_context.reduced = 0;
									}
									if (res >= 0){
										pos += res;
										res = 0;
									}
									if (res < 0){ pos = stack_1031; }
									if (res >= 0){
										pos += res;
										res = 0;
									}
									else{
										res = 0;
									}
									if (res >= 0){ 
										int stack_1034 = pos;
										if ((lexget(pos).checkid(ID_CC_LR))){
											pos += lexget(pos).tokenlength;
											res = 0;
										}
										else
										{res = -1;setRecord(ret, pos, ID_CC_FUNCTION, ID_CC_LR);}
										if (res < 0){ pos = stack_1034; }
									}
								}
							}
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_FUNCTION);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_FUNCTION(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_FUNCTION)) > 0){
			res = CC_FUNCTION(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	function_ctor	
	 int CC_FUNCTION_CTOR(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_FUNCTION_CTOR) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1036 = pos;
		if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_WORD_EXP(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_1036; }
		if (res >= 0){ 
			int stack_1038 = pos;
			if ((lexget(pos).checkid(ID_CC_LB))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_FUNCTION_CTOR, ID_CC_LB);}
			if (res < 0){ pos = stack_1038; }
			if (res >= 0){ 
				int stack_1040 = pos;
				if ((lexget(pos).checkid(ID_CC_PARAMS_DEF))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_PARAMS_DEF(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_1040; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					res = 0;
				}
				if (res >= 0){ 
					int stack_1043 = pos;
					if ((lexget(pos).checkid(ID_CC_RB))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_FUNCTION_CTOR, ID_CC_RB);}
					if (res < 0){ pos = stack_1043; }
					if (res >= 0){ 
						int stack_1045 = pos;
						if ((lexget(pos).checkid(ID_CC_LL))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else
						{res = -1;setRecord(ret, pos, ID_CC_FUNCTION_CTOR, ID_CC_LL);}
						if (res < 0){ pos = stack_1045; }
						if (res >= 0){ 
							int stack_1047 = pos;
							if ((lexget(pos).checkid(ID_CC_STATEMENTS))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else{
								res = CC_STATEMENTS(pos, _context);
								context.reduced |= _context.reduced;
								_context.reduced = 0;
							}
							if (res >= 0){
								pos += res;
								res = 0;
							}
							if (res < 0){ pos = stack_1047; }
							if (res >= 0){
								pos += res;
								res = 0;
							}
							else{
								res = 0;
							}
							if (res >= 0){ 
								int stack_1050 = pos;
								if ((lexget(pos).checkid(ID_CC_LR))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else
								{res = -1;setRecord(ret, pos, ID_CC_FUNCTION_CTOR, ID_CC_LR);}
								if (res < 0){ pos = stack_1050; }
							}
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_FUNCTION_CTOR);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_FUNCTION_CTOR(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_FUNCTION_CTOR)) > 0){
			res = CC_FUNCTION_CTOR(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	function_ctor_declare	
	 int CC_FUNCTION_CTOR_DECLARE(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_FUNCTION_CTOR_DECLARE) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1052 = pos;
		if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_WORD_EXP(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_1052; }
		if (res >= 0){ 
			int stack_1054 = pos;
			if ((lexget(pos).checkid(ID_CC_LB))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_FUNCTION_CTOR_DECLARE, ID_CC_LB);}
			if (res < 0){ pos = stack_1054; }
			if (res >= 0){ 
				int stack_1056 = pos;
				if ((lexget(pos).checkid(ID_CC_PARAMS_DEF))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_PARAMS_DEF(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_1056; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					res = 0;
				}
				if (res >= 0){ 
					int stack_1059 = pos;
					if ((lexget(pos).checkid(ID_CC_RB))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_FUNCTION_CTOR_DECLARE, ID_CC_RB);}
					if (res < 0){ pos = stack_1059; }
					if (res >= 0){ 
						int stack_1061 = pos;
						if ((lexget(pos).checkid(ID_CC_LE))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else
						{res = -1;setRecord(ret, pos, ID_CC_FUNCTION_CTOR_DECLARE, ID_CC_LE);}
						if (res < 0){ pos = stack_1061; }
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_FUNCTION_CTOR_DECLARE);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_FUNCTION_CTOR_DECLARE(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_FUNCTION_CTOR_DECLARE)) > 0){
			res = CC_FUNCTION_CTOR_DECLARE(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	operator	
	 int CC_OPERATOR(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_OPERATOR) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1063 = pos;
		int stack_1064 = pos;
		if ((lexget(pos).checkid(ID_CC_K_FINAL))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_K_FINAL);}
		if (res < 0){ pos = stack_1064; }
		if (res >= 0){ 
			int stack_1066 = pos;
			if ((lexget(pos).checkid(ID_CC_K_STATIC))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_K_STATIC);}
			if (res < 0){ pos = stack_1066; }
		}
		if (res < 0){ pos = stack_1063; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_1067 = pos;
			int stack_1068 = pos;
			if ((lexget(pos).checkid(ID_CC_K_STATIC))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_K_STATIC);}
			if (res < 0){ pos = stack_1068; }
			if (res >= 0){ 
				int stack_1070 = pos;
				if ((lexget(pos).checkid(ID_CC_K_FINAL))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_K_FINAL);}
				if (res < 0){ pos = stack_1070; }
			}
			if (res < 0){ pos = stack_1067; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_1071 = pos;
				if ((lexget(pos).checkid(ID_CC_K_FINAL))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_K_FINAL);}
				if (res < 0){ pos = stack_1071; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_1072 = pos;
					if ((lexget(pos).checkid(ID_CC_K_STATIC))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_K_STATIC);}
					if (res < 0){ pos = stack_1072; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						res = 0;
					}
				}
			}
		}
		if (res >= 0){ 
			int stack_1075 = pos;
			if ((lexget(pos).checkid(ID_CC_STATIC_TYPE))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_STATIC_TYPE(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_1075; }
			if (res >= 0){ 
				int stack_1077 = pos;
				if ((lexget(pos).checkid(ID_CC_K_OPERATOR))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_K_OPERATOR);}
				if (res < 0){ pos = stack_1077; }
				if (res >= 0){ 
					int stack_1079 = pos;
					if ((lexget(pos).checkid(ID_CC_COMPSET_SYMBOL))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_COMPSET_SYMBOL(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_1079; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						int stack_1080 = pos;
						if ((lexget(pos).checkid(ID_CC_LOGICOR_OPS))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else
						{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_LOGICOR_OPS);}
						if (res < 0){ pos = stack_1080; }
						if (res >= 0){
							pos += res;
							res = 0;
						}
						else{
							int stack_1081 = pos;
							if ((lexget(pos).checkid(ID_CC_LOGICAND_OPS))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else
							{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_LOGICAND_OPS);}
							if (res < 0){ pos = stack_1081; }
							if (res >= 0){
								pos += res;
								res = 0;
							}
							else{
								int stack_1082 = pos;
								if ((lexget(pos).checkid(ID_CC_BITOR_OPS))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else
								{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_BITOR_OPS);}
								if (res < 0){ pos = stack_1082; }
								if (res >= 0){
									pos += res;
									res = 0;
								}
								else{
									int stack_1083 = pos;
									if ((lexget(pos).checkid(ID_CC_BITXOR_OPS))){
										pos += lexget(pos).tokenlength;
										res = 0;
									}
									else
									{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_BITXOR_OPS);}
									if (res < 0){ pos = stack_1083; }
									if (res >= 0){
										pos += res;
										res = 0;
									}
									else{
										int stack_1084 = pos;
										if ((lexget(pos).checkid(ID_CC_BITAND_OPS))){
											pos += lexget(pos).tokenlength;
											res = 0;
										}
										else
										{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_BITAND_OPS);}
										if (res < 0){ pos = stack_1084; }
										if (res >= 0){
											pos += res;
											res = 0;
										}
										else{
											int stack_1085 = pos;
											if ((lexget(pos).checkid(ID_CC_EQUALS_OPS))){
												pos += lexget(pos).tokenlength;
												res = 0;
											}
											else
											{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_EQUALS_OPS);}
											if (res < 0){ pos = stack_1085; }
											if (res >= 0){
												pos += res;
												res = 0;
											}
											else{
												int stack_1086 = pos;
												if ((lexget(pos).checkid(ID_CC_BITMOV_OPS))){
													pos += lexget(pos).tokenlength;
													res = 0;
												}
												else
												{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_BITMOV_OPS);}
												if (res < 0){ pos = stack_1086; }
												if (res >= 0){
													pos += res;
													res = 0;
												}
												else{
													int stack_1087 = pos;
													if ((lexget(pos).checkid(ID_CC_COMPARE_SYMBOL))){
														pos += lexget(pos).tokenlength;
														res = 0;
													}
													else{
														res = CC_COMPARE_SYMBOL(pos, _context);
														context.reduced |= _context.reduced;
														_context.reduced = 0;
													}
													if (res >= 0){
														pos += res;
														res = 0;
													}
													if (res < 0){ pos = stack_1087; }
													if (res >= 0){
														pos += res;
														res = 0;
													}
													else{
														int stack_1088 = pos;
														if ((lexget(pos).checkid(ID_CC_SELF_OPS))){
															pos += lexget(pos).tokenlength;
															res = 0;
														}
														else
														{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_SELF_OPS);}
														if (res < 0){ pos = stack_1088; }
														if (res >= 0){
															pos += res;
															res = 0;
														}
														else{
															int stack_1089 = pos;
															if ((lexget(pos).checkid(ID_CC_UNARY_OPS))){
																pos += lexget(pos).tokenlength;
																res = 0;
															}
															else
															{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_UNARY_OPS);}
															if (res < 0){ pos = stack_1089; }
															if (res >= 0){
																pos += res;
																res = 0;
															}
															else{
																int stack_1090 = pos;
																if ((lexget(pos).checkid(ID_CC_ADDSUB_OPS))){
																	pos += lexget(pos).tokenlength;
																	res = 0;
																}
																else
																{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_ADDSUB_OPS);}
																if (res < 0){ pos = stack_1090; }
																if (res >= 0){
																	pos += res;
																	res = 0;
																}
																else{
																	int stack_1091 = pos;
																	if ((lexget(pos).checkid(ID_CC_MULDIVMOD_OPS))){
																		pos += lexget(pos).tokenlength;
																		res = 0;
																	}
																	else
																	{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_MULDIVMOD_OPS);}
																	if (res < 0){ pos = stack_1091; }
																	if (res >= 0){
																		pos += res;
																		res = 0;
																	}
																	else{
																		int stack_1092 = pos;
																		if ((lexget(pos).checkid(ID_CC_DOT))){
																			pos += lexget(pos).tokenlength;
																			res = 0;
																		}
																		else
																		{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_DOT);}
																		if (res < 0){ pos = stack_1092; }
																		if (res >= 0){
																			pos += res;
																			res = 0;
																		}
																		else{
																			int stack_1093 = pos;
																			int stack_1094 = pos;
																			if ((lexget(pos).checkid(ID_CC_LS))){
																				pos += lexget(pos).tokenlength;
																				res = 0;
																			}
																			else
																			{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_LS);}
																			if (res < 0){ pos = stack_1094; }
																			if (res >= 0){ 
																				int stack_1096 = pos;
																				if ((lexget(pos).checkid(ID_CC_RS))){
																					pos += lexget(pos).tokenlength;
																					res = 0;
																				}
																				else
																				{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_RS);}
																				if (res < 0){ pos = stack_1096; }
																			}
																			if (res < 0){ pos = stack_1093; }
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					if (res >= 0){ 
						int stack_1098 = pos;
						if ((lexget(pos).checkid(ID_CC_LB))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else
						{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_LB);}
						if (res < 0){ pos = stack_1098; }
						if (res >= 0){ 
							int stack_1100 = pos;
							if ((lexget(pos).checkid(ID_CC_PARAMS_DEF))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else{
								res = CC_PARAMS_DEF(pos, _context);
								context.reduced |= _context.reduced;
								_context.reduced = 0;
							}
							if (res >= 0){
								pos += res;
								res = 0;
							}
							if (res < 0){ pos = stack_1100; }
							if (res >= 0){
								pos += res;
								res = 0;
							}
							else{
								res = 0;
							}
							if (res >= 0){ 
								int stack_1103 = pos;
								if ((lexget(pos).checkid(ID_CC_RB))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else
								{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_RB);}
								if (res < 0){ pos = stack_1103; }
								if (res >= 0){ 
									int stack_1105 = pos;
									if ((lexget(pos).checkid(ID_CC_LL))){
										pos += lexget(pos).tokenlength;
										res = 0;
									}
									else
									{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_LL);}
									if (res < 0){ pos = stack_1105; }
									if (res >= 0){ 
										int stack_1107 = pos;
										if ((lexget(pos).checkid(ID_CC_STATEMENTS))){
											pos += lexget(pos).tokenlength;
											res = 0;
										}
										else{
											res = CC_STATEMENTS(pos, _context);
											context.reduced |= _context.reduced;
											_context.reduced = 0;
										}
										if (res >= 0){
											pos += res;
											res = 0;
										}
										if (res < 0){ pos = stack_1107; }
										if (res >= 0){
											pos += res;
											res = 0;
										}
										else{
											res = 0;
										}
										if (res >= 0){ 
											int stack_1110 = pos;
											if ((lexget(pos).checkid(ID_CC_LR))){
												pos += lexget(pos).tokenlength;
												res = 0;
											}
											else
											{res = -1;setRecord(ret, pos, ID_CC_OPERATOR, ID_CC_LR);}
											if (res < 0){ pos = stack_1110; }
										}
									}
								}
							}
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_OPERATOR);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_OPERATOR(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_OPERATOR)) > 0){
			res = CC_OPERATOR(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	dispatch	
	 int CC_DISPATCH(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_DISPATCH) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1112 = pos;
		if ((lexget(pos).checkid(ID_CC_FUNCTION_CTOR))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_FUNCTION_CTOR(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_1112; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_1113 = pos;
			if ((lexget(pos).checkid(ID_CC_FUNCTION_CTOR_DECLARE))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_FUNCTION_CTOR_DECLARE(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_1113; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_1114 = pos;
				if ((lexget(pos).checkid(ID_CC_FUNCTION))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_FUNCTION(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_1114; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_1115 = pos;
					if ((lexget(pos).checkid(ID_CC_OPERATOR))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_OPERATOR(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_1115; }
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_DISPATCH);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_DISPATCH(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_DISPATCH)) > 0){
			res = CC_DISPATCH(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	baseclass	
	 int CC_BASECLASS(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_BASECLASS) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1117 = pos;
		if ((lexget(pos).checkid(ID_CC_COLON))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_BASECLASS, ID_CC_COLON);}
		if (res < 0){ pos = stack_1117; }
		if (res >= 0){ 
			int stack_1119 = pos;
			int stack_1120 = pos;
			if ((lexget(pos).checkid(ID_CC_LC))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_BASECLASS, ID_CC_LC);}
			if (res < 0){ pos = stack_1120; }
			if (res >= 0){ 
				int stack_1122 = pos;
				if ((lexget(pos).checkid(ID_CC_TEMPLATE_PARAMS))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_TEMPLATE_PARAMS(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_1122; }
				if (res >= 0){ 
					int stack_1124 = pos;
					if ((lexget(pos).checkid(ID_CC_RC))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_BASECLASS, ID_CC_RC);}
					if (res < 0){ pos = stack_1124; }
				}
			}
			if (res < 0){ pos = stack_1119; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_1125 = pos;
				if ((lexget(pos).checkid(ID_CC_STATIC_TYPE))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_STATIC_TYPE(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_1125; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_BASECLASS);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_BASECLASS(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_BASECLASS)) > 0){
			res = CC_BASECLASS(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	nativefunction_def	
	 int CC_NATIVEFUNCTION_DEF(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_NATIVEFUNCTION_DEF) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1127 = pos;
		if ((lexget(pos).checkid(ID_CC_STATIC_TYPE))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_STATIC_TYPE(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_1127; }
		if (res >= 0){ 
			int stack_1129 = pos;
			if ((lexget(pos).checkid(ID_CC_K_CDECL))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_NATIVEFUNCTION_DEF, ID_CC_K_CDECL);}
			if (res < 0){ pos = stack_1129; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_1130 = pos;
				if ((lexget(pos).checkid(ID_CC_K_STDCALL))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_NATIVEFUNCTION_DEF, ID_CC_K_STDCALL);}
				if (res < 0){ pos = stack_1130; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_1131 = pos;
					if ((lexget(pos).checkid(ID_CC_K_FASTCALL))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_NATIVEFUNCTION_DEF, ID_CC_K_FASTCALL);}
					if (res < 0){ pos = stack_1131; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						int stack_1132 = pos;
						if ((lexget(pos).checkid(ID_CC_K_PASCAL))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else
						{res = -1;setRecord(ret, pos, ID_CC_NATIVEFUNCTION_DEF, ID_CC_K_PASCAL);}
						if (res < 0){ pos = stack_1132; }
					}
				}
			}
			if (res >= 0){ 
				int stack_1134 = pos;
				if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_WORD_EXP(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_1134; }
				if (res >= 0){ 
					int stack_1136 = pos;
					if ((lexget(pos).checkid(ID_CC_LB))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_NATIVEFUNCTION_DEF, ID_CC_LB);}
					if (res < 0){ pos = stack_1136; }
					if (res >= 0){ 
						int stack_1138 = pos;
						if ((lexget(pos).checkid(ID_CC_NATIVEPARAMS_DEF))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_NATIVEPARAMS_DEF(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_1138; }
						if (res >= 0){
							pos += res;
							res = 0;
						}
						else{
							res = 0;
						}
						if (res >= 0){ 
							int stack_1141 = pos;
							if ((lexget(pos).checkid(ID_CC_RB))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else
							{res = -1;setRecord(ret, pos, ID_CC_NATIVEFUNCTION_DEF, ID_CC_RB);}
							if (res < 0){ pos = stack_1141; }
							if (res >= 0){ 
								int stack_1143 = pos;
								if ((lexget(pos).checkid(ID_CC_LE))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else
								{res = -1;setRecord(ret, pos, ID_CC_NATIVEFUNCTION_DEF, ID_CC_LE);}
								if (res < 0){ pos = stack_1143; }
							}
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_NATIVEFUNCTION_DEF);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_NATIVEFUNCTION_DEF(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_NATIVEFUNCTION_DEF)) > 0){
			res = CC_NATIVEFUNCTION_DEF(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	native_import_body	
	 int CC_NATIVE_IMPORT_BODY(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_NATIVE_IMPORT_BODY) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1145 = pos;
		if ((lexget(pos).checkid(ID_CC_NATIVE_IMPORT_BODY))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_NATIVE_IMPORT_BODY, ID_CC_NATIVE_IMPORT_BODY);}
		if (res < 0){ pos = stack_1145; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			res = 0;
		}
		if (res >= 0){ 
			int stack_1148 = pos;
			if ((lexget(pos).checkid(ID_CC_NATIVEFUNCTION_DEF))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_NATIVEFUNCTION_DEF(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_1148; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				res = 0;
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_NATIVE_IMPORT_BODY);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_NATIVE_IMPORT_BODY(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_NATIVE_IMPORT_BODY)) > 0){
			res = CC_NATIVE_IMPORT_BODY(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	native_import	
	 int CC_NATIVE_IMPORT(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_NATIVE_IMPORT) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1151 = pos;
		if ((lexget(pos).checkid(ID_CC_K_IMPORT))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_NATIVE_IMPORT, ID_CC_K_IMPORT);}
		if (res < 0){ pos = stack_1151; }
		if (res >= 0){ 
			int stack_1153 = pos;
			if ((lexget(pos).checkid(ID_CC_STRING))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_NATIVE_IMPORT, ID_CC_STRING);}
			if (res < 0){ pos = stack_1153; }
			if (res >= 0){ 
				int stack_1155 = pos;
				if ((lexget(pos).checkid(ID_CC_LL))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_NATIVE_IMPORT, ID_CC_LL);}
				if (res < 0){ pos = stack_1155; }
				if (res >= 0){ 
					int stack_1157 = pos;
					if ((lexget(pos).checkid(ID_CC_NATIVE_IMPORT_BODY))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_NATIVE_IMPORT_BODY(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_1157; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						res = 0;
					}
					if (res >= 0){ 
						int stack_1160 = pos;
						if ((lexget(pos).checkid(ID_CC_LR))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else
						{res = -1;setRecord(ret, pos, ID_CC_NATIVE_IMPORT, ID_CC_LR);}
						if (res < 0){ pos = stack_1160; }
						if (res >= 0){ 
							int stack_1162 = pos;
							if ((lexget(pos).checkid(ID_CC_LE))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else
							{res = -1;setRecord(ret, pos, ID_CC_NATIVE_IMPORT, ID_CC_LE);}
							if (res < 0){ pos = stack_1162; }
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_NATIVE_IMPORT);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_NATIVE_IMPORT(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_NATIVE_IMPORT)) > 0){
			res = CC_NATIVE_IMPORT(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	class_body	
	 int CC_CLASS_BODY(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_CLASS_BODY) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1164 = pos;
		if ((lexget(pos).checkid(ID_CC_CLASS_BODY))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_CLASS_BODY, ID_CC_CLASS_BODY);}
		if (res < 0){ pos = stack_1164; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			res = 0;
		}
		if (res >= 0){ 
			int stack_1167 = pos;
			if ((lexget(pos).checkid(ID_CC_DISPATCH))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_DISPATCH(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_1167; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_1168 = pos;
				if ((lexget(pos).checkid(ID_CC_INTERFACE_DISPATCH))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_INTERFACE_DISPATCH(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_1168; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_1169 = pos;
					if ((lexget(pos).checkid(ID_CC_NATIVE_IMPORT))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_NATIVE_IMPORT(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_1169; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						int stack_1170 = pos;
						if ((lexget(pos).checkid(ID_CC_CLASS))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_CLASS(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_1170; }
						if (res >= 0){
							pos += res;
							res = 0;
						}
						else{
							int stack_1171 = pos;
							if ((lexget(pos).checkid(ID_CC_INTERFACE))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else{
								res = CC_INTERFACE(pos, _context);
								context.reduced |= _context.reduced;
								_context.reduced = 0;
							}
							if (res >= 0){
								pos += res;
								res = 0;
							}
							if (res < 0){ pos = stack_1171; }
							if (res >= 0){
								pos += res;
								res = 0;
							}
							else{
								int stack_1172 = pos;
								if ((lexget(pos).checkid(ID_CC_DEF_VARIABLE_STATE))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else{
									res = CC_DEF_VARIABLE_STATE(pos, _context);
									context.reduced |= _context.reduced;
									_context.reduced = 0;
								}
								if (res >= 0){
									pos += res;
									res = 0;
								}
								if (res < 0){ pos = stack_1172; }
							}
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_CLASS_BODY);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_CLASS_BODY(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_CLASS_BODY)) > 0){
			res = CC_CLASS_BODY(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	class	
	 int CC_CLASS(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_CLASS) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1174 = pos;
		int stack_1175 = pos;
		if ((lexget(pos).checkid(ID_CC_K_FINAL))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_CLASS, ID_CC_K_FINAL);}
		if (res < 0){ pos = stack_1175; }
		if (res >= 0){ 
			int stack_1177 = pos;
			if ((lexget(pos).checkid(ID_CC_K_STATIC))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_CLASS, ID_CC_K_STATIC);}
			if (res < 0){ pos = stack_1177; }
		}
		if (res < 0){ pos = stack_1174; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_1178 = pos;
			int stack_1179 = pos;
			if ((lexget(pos).checkid(ID_CC_K_STATIC))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_CLASS, ID_CC_K_STATIC);}
			if (res < 0){ pos = stack_1179; }
			if (res >= 0){ 
				int stack_1181 = pos;
				if ((lexget(pos).checkid(ID_CC_K_FINAL))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_CLASS, ID_CC_K_FINAL);}
				if (res < 0){ pos = stack_1181; }
			}
			if (res < 0){ pos = stack_1178; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_1182 = pos;
				if ((lexget(pos).checkid(ID_CC_K_FINAL))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_CLASS, ID_CC_K_FINAL);}
				if (res < 0){ pos = stack_1182; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_1183 = pos;
					if ((lexget(pos).checkid(ID_CC_K_STATIC))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_CLASS, ID_CC_K_STATIC);}
					if (res < 0){ pos = stack_1183; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						res = 0;
					}
				}
			}
		}
		if (res >= 0){ 
			int stack_1186 = pos;
			if ((lexget(pos).checkid(ID_CC_K_CLASS))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_CLASS, ID_CC_K_CLASS);}
			if (res < 0){ pos = stack_1186; }
			if (res >= 0){ 
				int stack_1188 = pos;
				if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_WORD_EXP(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_1188; }
				if (res >= 0){ 
					int stack_1190 = pos;
					int stack_1191 = pos;
					if ((lexget(pos).checkid(ID_CC_LC))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_CLASS, ID_CC_LC);}
					if (res < 0){ pos = stack_1191; }
					if (res >= 0){ 
						int stack_1193 = pos;
						if ((lexget(pos).checkid(ID_CC_TEMPLATE_PARAMS))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_TEMPLATE_PARAMS(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_1193; }
						if (res >= 0){ 
							int stack_1195 = pos;
							if ((lexget(pos).checkid(ID_CC_RC))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else
							{res = -1;setRecord(ret, pos, ID_CC_CLASS, ID_CC_RC);}
							if (res < 0){ pos = stack_1195; }
						}
					}
					if (res < 0){ pos = stack_1190; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						res = 0;
					}
					if (res >= 0){ 
						int stack_1198 = pos;
						if ((lexget(pos).checkid(ID_CC_BASECLASS))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_BASECLASS(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_1198; }
						if (res >= 0){
							pos += res;
							res = 0;
						}
						else{
							res = 0;
						}
						if (res >= 0){ 
							int stack_1201 = pos;
							if ((lexget(pos).checkid(ID_CC_LL))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else
							{res = -1;setRecord(ret, pos, ID_CC_CLASS, ID_CC_LL);}
							if (res < 0){ pos = stack_1201; }
							if (res >= 0){ 
								int stack_1203 = pos;
								if ((lexget(pos).checkid(ID_CC_CLASS_BODY))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else{
									res = CC_CLASS_BODY(pos, _context);
									context.reduced |= _context.reduced;
									_context.reduced = 0;
								}
								if (res >= 0){
									pos += res;
									res = 0;
								}
								if (res < 0){ pos = stack_1203; }
								if (res >= 0){
									pos += res;
									res = 0;
								}
								else{
									res = 0;
								}
								if (res >= 0){ 
									int stack_1206 = pos;
									if ((lexget(pos).checkid(ID_CC_LR))){
										pos += lexget(pos).tokenlength;
										res = 0;
									}
									else
									{res = -1;setRecord(ret, pos, ID_CC_CLASS, ID_CC_LR);}
									if (res < 0){ pos = stack_1206; }
									if (res >= 0){ 
										int stack_1208 = pos;
										if ((lexget(pos).checkid(ID_CC_LE))){
											pos += lexget(pos).tokenlength;
											res = 0;
										}
										else
										{res = -1;setRecord(ret, pos, ID_CC_CLASS, ID_CC_LE);}
										if (res < 0){ pos = stack_1208; }
									}
								}
							}
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_CLASS);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_CLASS(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_CLASS)) > 0){
			res = CC_CLASS(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	baseinterface	
	 int CC_BASEINTERFACE(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_BASEINTERFACE) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1210 = pos;
		if ((lexget(pos).checkid(ID_CC_COLON))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_BASEINTERFACE, ID_CC_COLON);}
		if (res < 0){ pos = stack_1210; }
		if (res >= 0){ 
			int stack_1212 = pos;
			if ((lexget(pos).checkid(ID_CC_STATIC_TYPE))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_STATIC_TYPE(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_1212; }
		}
		
		lexget(ret).unlockfunction(ID_CC_BASEINTERFACE);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_BASEINTERFACE(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_BASEINTERFACE)) > 0){
			res = CC_BASEINTERFACE(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	function_declare	
	 int CC_FUNCTION_DECLARE(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_FUNCTION_DECLARE) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1214 = pos;
		int stack_1215 = pos;
		if ((lexget(pos).checkid(ID_CC_K_FINAL))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_FUNCTION_DECLARE, ID_CC_K_FINAL);}
		if (res < 0){ pos = stack_1215; }
		if (res >= 0){ 
			int stack_1217 = pos;
			if ((lexget(pos).checkid(ID_CC_K_STATIC))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_FUNCTION_DECLARE, ID_CC_K_STATIC);}
			if (res < 0){ pos = stack_1217; }
		}
		if (res < 0){ pos = stack_1214; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_1218 = pos;
			int stack_1219 = pos;
			if ((lexget(pos).checkid(ID_CC_K_STATIC))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_FUNCTION_DECLARE, ID_CC_K_STATIC);}
			if (res < 0){ pos = stack_1219; }
			if (res >= 0){ 
				int stack_1221 = pos;
				if ((lexget(pos).checkid(ID_CC_K_FINAL))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_FUNCTION_DECLARE, ID_CC_K_FINAL);}
				if (res < 0){ pos = stack_1221; }
			}
			if (res < 0){ pos = stack_1218; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_1222 = pos;
				if ((lexget(pos).checkid(ID_CC_K_FINAL))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_FUNCTION_DECLARE, ID_CC_K_FINAL);}
				if (res < 0){ pos = stack_1222; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_1223 = pos;
					if ((lexget(pos).checkid(ID_CC_K_STATIC))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_FUNCTION_DECLARE, ID_CC_K_STATIC);}
					if (res < 0){ pos = stack_1223; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						res = 0;
					}
				}
			}
		}
		if (res >= 0){ 
			int stack_1226 = pos;
			if ((lexget(pos).checkid(ID_CC_STATIC_TYPE))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_STATIC_TYPE(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_1226; }
			if (res >= 0){ 
				int stack_1228 = pos;
				if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_WORD_EXP(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_1228; }
				if (res >= 0){ 
					int stack_1230 = pos;
					if ((lexget(pos).checkid(ID_CC_LB))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_FUNCTION_DECLARE, ID_CC_LB);}
					if (res < 0){ pos = stack_1230; }
					if (res >= 0){ 
						int stack_1232 = pos;
						if ((lexget(pos).checkid(ID_CC_PARAMS_DEF))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_PARAMS_DEF(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_1232; }
						if (res >= 0){
							pos += res;
							res = 0;
						}
						else{
							res = 0;
						}
						if (res >= 0){ 
							int stack_1235 = pos;
							if ((lexget(pos).checkid(ID_CC_RB))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else
							{res = -1;setRecord(ret, pos, ID_CC_FUNCTION_DECLARE, ID_CC_RB);}
							if (res < 0){ pos = stack_1235; }
							if (res >= 0){ 
								int stack_1237 = pos;
								if ((lexget(pos).checkid(ID_CC_LE))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else
								{res = -1;setRecord(ret, pos, ID_CC_FUNCTION_DECLARE, ID_CC_LE);}
								if (res < 0){ pos = stack_1237; }
							}
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_FUNCTION_DECLARE);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_FUNCTION_DECLARE(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_FUNCTION_DECLARE)) > 0){
			res = CC_FUNCTION_DECLARE(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	operator_declare	
	 int CC_OPERATOR_DECLARE(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_OPERATOR_DECLARE) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1239 = pos;
		int stack_1240 = pos;
		if ((lexget(pos).checkid(ID_CC_K_FINAL))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_K_FINAL);}
		if (res < 0){ pos = stack_1240; }
		if (res >= 0){ 
			int stack_1242 = pos;
			if ((lexget(pos).checkid(ID_CC_K_STATIC))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_K_STATIC);}
			if (res < 0){ pos = stack_1242; }
		}
		if (res < 0){ pos = stack_1239; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_1243 = pos;
			int stack_1244 = pos;
			if ((lexget(pos).checkid(ID_CC_K_STATIC))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else
			{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_K_STATIC);}
			if (res < 0){ pos = stack_1244; }
			if (res >= 0){ 
				int stack_1246 = pos;
				if ((lexget(pos).checkid(ID_CC_K_FINAL))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_K_FINAL);}
				if (res < 0){ pos = stack_1246; }
			}
			if (res < 0){ pos = stack_1243; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_1247 = pos;
				if ((lexget(pos).checkid(ID_CC_K_FINAL))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_K_FINAL);}
				if (res < 0){ pos = stack_1247; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_1248 = pos;
					if ((lexget(pos).checkid(ID_CC_K_STATIC))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_K_STATIC);}
					if (res < 0){ pos = stack_1248; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						res = 0;
					}
				}
			}
		}
		if (res >= 0){ 
			int stack_1251 = pos;
			if ((lexget(pos).checkid(ID_CC_STATIC_TYPE))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_STATIC_TYPE(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_1251; }
			if (res >= 0){ 
				int stack_1253 = pos;
				if ((lexget(pos).checkid(ID_CC_K_OPERATOR))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_K_OPERATOR);}
				if (res < 0){ pos = stack_1253; }
				if (res >= 0){ 
					int stack_1255 = pos;
					if ((lexget(pos).checkid(ID_CC_COMPSET_SYMBOL))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_COMPSET_SYMBOL(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_1255; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						int stack_1256 = pos;
						if ((lexget(pos).checkid(ID_CC_LOGICOR_OPS))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else
						{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_LOGICOR_OPS);}
						if (res < 0){ pos = stack_1256; }
						if (res >= 0){
							pos += res;
							res = 0;
						}
						else{
							int stack_1257 = pos;
							if ((lexget(pos).checkid(ID_CC_LOGICAND_OPS))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else
							{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_LOGICAND_OPS);}
							if (res < 0){ pos = stack_1257; }
							if (res >= 0){
								pos += res;
								res = 0;
							}
							else{
								int stack_1258 = pos;
								if ((lexget(pos).checkid(ID_CC_BITOR_OPS))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else
								{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_BITOR_OPS);}
								if (res < 0){ pos = stack_1258; }
								if (res >= 0){
									pos += res;
									res = 0;
								}
								else{
									int stack_1259 = pos;
									if ((lexget(pos).checkid(ID_CC_BITXOR_OPS))){
										pos += lexget(pos).tokenlength;
										res = 0;
									}
									else
									{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_BITXOR_OPS);}
									if (res < 0){ pos = stack_1259; }
									if (res >= 0){
										pos += res;
										res = 0;
									}
									else{
										int stack_1260 = pos;
										if ((lexget(pos).checkid(ID_CC_BITAND_OPS))){
											pos += lexget(pos).tokenlength;
											res = 0;
										}
										else
										{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_BITAND_OPS);}
										if (res < 0){ pos = stack_1260; }
										if (res >= 0){
											pos += res;
											res = 0;
										}
										else{
											int stack_1261 = pos;
											if ((lexget(pos).checkid(ID_CC_EQUALS_OPS))){
												pos += lexget(pos).tokenlength;
												res = 0;
											}
											else
											{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_EQUALS_OPS);}
											if (res < 0){ pos = stack_1261; }
											if (res >= 0){
												pos += res;
												res = 0;
											}
											else{
												int stack_1262 = pos;
												if ((lexget(pos).checkid(ID_CC_BITMOV_OPS))){
													pos += lexget(pos).tokenlength;
													res = 0;
												}
												else
												{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_BITMOV_OPS);}
												if (res < 0){ pos = stack_1262; }
												if (res >= 0){
													pos += res;
													res = 0;
												}
												else{
													int stack_1263 = pos;
													if ((lexget(pos).checkid(ID_CC_COMPARE_SYMBOL))){
														pos += lexget(pos).tokenlength;
														res = 0;
													}
													else{
														res = CC_COMPARE_SYMBOL(pos, _context);
														context.reduced |= _context.reduced;
														_context.reduced = 0;
													}
													if (res >= 0){
														pos += res;
														res = 0;
													}
													if (res < 0){ pos = stack_1263; }
													if (res >= 0){
														pos += res;
														res = 0;
													}
													else{
														int stack_1264 = pos;
														if ((lexget(pos).checkid(ID_CC_SELF_OPS))){
															pos += lexget(pos).tokenlength;
															res = 0;
														}
														else
														{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_SELF_OPS);}
														if (res < 0){ pos = stack_1264; }
														if (res >= 0){
															pos += res;
															res = 0;
														}
														else{
															int stack_1265 = pos;
															if ((lexget(pos).checkid(ID_CC_UNARY_OPS))){
																pos += lexget(pos).tokenlength;
																res = 0;
															}
															else
															{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_UNARY_OPS);}
															if (res < 0){ pos = stack_1265; }
															if (res >= 0){
																pos += res;
																res = 0;
															}
															else{
																int stack_1266 = pos;
																if ((lexget(pos).checkid(ID_CC_ADDSUB_OPS))){
																	pos += lexget(pos).tokenlength;
																	res = 0;
																}
																else
																{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_ADDSUB_OPS);}
																if (res < 0){ pos = stack_1266; }
																if (res >= 0){
																	pos += res;
																	res = 0;
																}
																else{
																	int stack_1267 = pos;
																	if ((lexget(pos).checkid(ID_CC_MULDIVMOD_OPS))){
																		pos += lexget(pos).tokenlength;
																		res = 0;
																	}
																	else
																	{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_MULDIVMOD_OPS);}
																	if (res < 0){ pos = stack_1267; }
																	if (res >= 0){
																		pos += res;
																		res = 0;
																	}
																	else{
																		int stack_1268 = pos;
																		if ((lexget(pos).checkid(ID_CC_DOT))){
																			pos += lexget(pos).tokenlength;
																			res = 0;
																		}
																		else
																		{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_DOT);}
																		if (res < 0){ pos = stack_1268; }
																		if (res >= 0){
																			pos += res;
																			res = 0;
																		}
																		else{
																			int stack_1269 = pos;
																			int stack_1270 = pos;
																			if ((lexget(pos).checkid(ID_CC_LS))){
																				pos += lexget(pos).tokenlength;
																				res = 0;
																			}
																			else
																			{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_LS);}
																			if (res < 0){ pos = stack_1270; }
																			if (res >= 0){ 
																				int stack_1272 = pos;
																				if ((lexget(pos).checkid(ID_CC_RS))){
																					pos += lexget(pos).tokenlength;
																					res = 0;
																				}
																				else
																				{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_RS);}
																				if (res < 0){ pos = stack_1272; }
																			}
																			if (res < 0){ pos = stack_1269; }
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					if (res >= 0){ 
						int stack_1274 = pos;
						if ((lexget(pos).checkid(ID_CC_LB))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else
						{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_LB);}
						if (res < 0){ pos = stack_1274; }
						if (res >= 0){ 
							int stack_1276 = pos;
							if ((lexget(pos).checkid(ID_CC_PARAMS_DEF))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else{
								res = CC_PARAMS_DEF(pos, _context);
								context.reduced |= _context.reduced;
								_context.reduced = 0;
							}
							if (res >= 0){
								pos += res;
								res = 0;
							}
							if (res < 0){ pos = stack_1276; }
							if (res >= 0){
								pos += res;
								res = 0;
							}
							else{
								res = 0;
							}
							if (res >= 0){ 
								int stack_1279 = pos;
								if ((lexget(pos).checkid(ID_CC_RB))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else
								{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_RB);}
								if (res < 0){ pos = stack_1279; }
								if (res >= 0){ 
									int stack_1281 = pos;
									if ((lexget(pos).checkid(ID_CC_LE))){
										pos += lexget(pos).tokenlength;
										res = 0;
									}
									else
									{res = -1;setRecord(ret, pos, ID_CC_OPERATOR_DECLARE, ID_CC_LE);}
									if (res < 0){ pos = stack_1281; }
								}
							}
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_OPERATOR_DECLARE);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_OPERATOR_DECLARE(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_OPERATOR_DECLARE)) > 0){
			res = CC_OPERATOR_DECLARE(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	interface_dispatch	
	 int CC_INTERFACE_DISPATCH(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_INTERFACE_DISPATCH) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1283 = pos;
		if ((lexget(pos).checkid(ID_CC_FUNCTION_DECLARE))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_FUNCTION_DECLARE(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_1283; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			int stack_1284 = pos;
			if ((lexget(pos).checkid(ID_CC_OPERATOR_DECLARE))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_OPERATOR_DECLARE(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_1284; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_1285 = pos;
				if ((lexget(pos).checkid(ID_CC_INTERFACE))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_INTERFACE(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_1285; }
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_INTERFACE_DISPATCH);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_INTERFACE_DISPATCH(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_INTERFACE_DISPATCH)) > 0){
			res = CC_INTERFACE_DISPATCH(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	interface_body	
	 int CC_INTERFACE_BODY(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_INTERFACE_BODY) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1287 = pos;
		if ((lexget(pos).checkid(ID_CC_INTERFACE_BODY))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_INTERFACE_BODY, ID_CC_INTERFACE_BODY);}
		if (res < 0){ pos = stack_1287; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			res = 0;
		}
		if (res >= 0){ 
			int stack_1290 = pos;
			if ((lexget(pos).checkid(ID_CC_INTERFACE_DISPATCH))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_INTERFACE_DISPATCH(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_1290; }
		}
		
		lexget(ret).unlockfunction(ID_CC_INTERFACE_BODY);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_INTERFACE_BODY(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_INTERFACE_BODY)) > 0){
			res = CC_INTERFACE_BODY(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	interface	
	 int CC_INTERFACE(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_INTERFACE) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1292 = pos;
		if ((lexget(pos).checkid(ID_CC_K_INTERFACE))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_INTERFACE, ID_CC_K_INTERFACE);}
		if (res < 0){ pos = stack_1292; }
		if (res >= 0){ 
			int stack_1294 = pos;
			if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_WORD_EXP(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_1294; }
			if (res >= 0){ 
				int stack_1296 = pos;
				if ((lexget(pos).checkid(ID_CC_BASEINTERFACE))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_BASEINTERFACE(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_1296; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					res = 0;
				}
				if (res >= 0){ 
					int stack_1299 = pos;
					if ((lexget(pos).checkid(ID_CC_LL))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else
					{res = -1;setRecord(ret, pos, ID_CC_INTERFACE, ID_CC_LL);}
					if (res < 0){ pos = stack_1299; }
					if (res >= 0){ 
						int stack_1301 = pos;
						if ((lexget(pos).checkid(ID_CC_INTERFACE_BODY))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_INTERFACE_BODY(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_1301; }
						if (res >= 0){
							pos += res;
							res = 0;
						}
						else{
							res = 0;
						}
						if (res >= 0){ 
							int stack_1304 = pos;
							if ((lexget(pos).checkid(ID_CC_LR))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else
							{res = -1;setRecord(ret, pos, ID_CC_INTERFACE, ID_CC_LR);}
							if (res < 0){ pos = stack_1304; }
							if (res >= 0){ 
								int stack_1306 = pos;
								if ((lexget(pos).checkid(ID_CC_LE))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else
								{res = -1;setRecord(ret, pos, ID_CC_INTERFACE, ID_CC_LE);}
								if (res < 0){ pos = stack_1306; }
							}
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_INTERFACE);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_INTERFACE(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_INTERFACE)) > 0){
			res = CC_INTERFACE(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	package_body	
	 int CC_PACKAGE_BODY(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_PACKAGE_BODY) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1308 = pos;
		if ((lexget(pos).checkid(ID_CC_PACKAGE_BODY))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_PACKAGE_BODY, ID_CC_PACKAGE_BODY);}
		if (res < 0){ pos = stack_1308; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			res = 0;
		}
		if (res >= 0){ 
			int stack_1311 = pos;
			if ((lexget(pos).checkid(ID_CC_PACKAGE))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_PACKAGE(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_1311; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_1312 = pos;
				if ((lexget(pos).checkid(ID_CC_CLASS))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_CLASS(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_1312; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_1313 = pos;
					if ((lexget(pos).checkid(ID_CC_INTERFACE))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_INTERFACE(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_1313; }
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_PACKAGE_BODY);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_PACKAGE_BODY(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_PACKAGE_BODY)) > 0){
			res = CC_PACKAGE_BODY(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	package	
	 int CC_PACKAGE(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_PACKAGE) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1315 = pos;
		if ((lexget(pos).checkid(ID_CC_K_PACKAGE))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_PACKAGE, ID_CC_K_PACKAGE);}
		if (res < 0){ pos = stack_1315; }
		if (res >= 0){ 
			int stack_1317 = pos;
			if ((lexget(pos).checkid(ID_CC_WORD_EXP))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_WORD_EXP(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_1317; }
			if (res >= 0){ 
				int stack_1319 = pos;
				if ((lexget(pos).checkid(ID_CC_LL))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else
				{res = -1;setRecord(ret, pos, ID_CC_PACKAGE, ID_CC_LL);}
				if (res < 0){ pos = stack_1319; }
				if (res >= 0){ 
					int stack_1321 = pos;
					if ((lexget(pos).checkid(ID_CC_PACKAGE_BODY))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_PACKAGE_BODY(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_1321; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						res = 0;
					}
					if (res >= 0){ 
						int stack_1324 = pos;
						if ((lexget(pos).checkid(ID_CC_LR))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else
						{res = -1;setRecord(ret, pos, ID_CC_PACKAGE, ID_CC_LR);}
						if (res < 0){ pos = stack_1324; }
						if (res >= 0){ 
							int stack_1326 = pos;
							if ((lexget(pos).checkid(ID_CC_LE))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else
							{res = -1;setRecord(ret, pos, ID_CC_PACKAGE, ID_CC_LE);}
							if (res < 0){ pos = stack_1326; }
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_PACKAGE);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_PACKAGE(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_PACKAGE)) > 0){
			res = CC_PACKAGE(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	declare	
	 int CC_DECLARE(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_DECLARE) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1328 = pos;
		if ((lexget(pos).checkid(ID_CC_K_DECLARE))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_DECLARE, ID_CC_K_DECLARE);}
		if (res < 0){ pos = stack_1328; }
		if (res >= 0){ 
			int stack_1330 = pos;
			if ((lexget(pos).checkid(ID_CC_PACKAGE))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_PACKAGE(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_1330; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_1331 = pos;
				if ((lexget(pos).checkid(ID_CC_CLASS))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_CLASS(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_1331; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_1332 = pos;
					if ((lexget(pos).checkid(ID_CC_INTERFACE))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_INTERFACE(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_1332; }
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_DECLARE);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_DECLARE(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_DECLARE)) > 0){
			res = CC_DECLARE(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	global	
	 int CC_GLOBAL(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_GLOBAL) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1334 = pos;
		if ((lexget(pos).checkid(ID_CC_GLOBAL))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else
		{res = -1;setRecord(ret, pos, ID_CC_GLOBAL, ID_CC_GLOBAL);}
		if (res < 0){ pos = stack_1334; }
		if (res >= 0){
			pos += res;
			res = 0;
		}
		else{
			res = 0;
		}
		if (res >= 0){ 
			int stack_1337 = pos;
			if ((lexget(pos).checkid(ID_CC_DECLARE))){
				pos += lexget(pos).tokenlength;
				res = 0;
			}
			else{
				res = CC_DECLARE(pos, _context);
				context.reduced |= _context.reduced;
				_context.reduced = 0;
			}
			if (res >= 0){
				pos += res;
				res = 0;
			}
			if (res < 0){ pos = stack_1337; }
			if (res >= 0){
				pos += res;
				res = 0;
			}
			else{
				int stack_1338 = pos;
				if ((lexget(pos).checkid(ID_CC_FUNCTION))){
					pos += lexget(pos).tokenlength;
					res = 0;
				}
				else{
					res = CC_FUNCTION(pos, _context);
					context.reduced |= _context.reduced;
					_context.reduced = 0;
				}
				if (res >= 0){
					pos += res;
					res = 0;
				}
				if (res < 0){ pos = stack_1338; }
				if (res >= 0){
					pos += res;
					res = 0;
				}
				else{
					int stack_1339 = pos;
					if ((lexget(pos).checkid(ID_CC_USING))){
						pos += lexget(pos).tokenlength;
						res = 0;
					}
					else{
						res = CC_USING(pos, _context);
						context.reduced |= _context.reduced;
						_context.reduced = 0;
					}
					if (res >= 0){
						pos += res;
						res = 0;
					}
					if (res < 0){ pos = stack_1339; }
					if (res >= 0){
						pos += res;
						res = 0;
					}
					else{
						int stack_1340 = pos;
						if ((lexget(pos).checkid(ID_CC_INCLUDE))){
							pos += lexget(pos).tokenlength;
							res = 0;
						}
						else{
							res = CC_INCLUDE(pos, _context);
							context.reduced |= _context.reduced;
							_context.reduced = 0;
						}
						if (res >= 0){
							pos += res;
							res = 0;
						}
						if (res < 0){ pos = stack_1340; }
						if (res >= 0){
							pos += res;
							res = 0;
						}
						else{
							int stack_1341 = pos;
							if ((lexget(pos).checkid(ID_CC_REQUIRE))){
								pos += lexget(pos).tokenlength;
								res = 0;
							}
							else{
								res = CC_REQUIRE(pos, _context);
								context.reduced |= _context.reduced;
								_context.reduced = 0;
							}
							if (res >= 0){
								pos += res;
								res = 0;
							}
							if (res < 0){ pos = stack_1341; }
							if (res >= 0){
								pos += res;
								res = 0;
							}
							else{
								int stack_1342 = pos;
								if ((lexget(pos).checkid(ID_CC_NATIVE_IMPORT))){
									pos += lexget(pos).tokenlength;
									res = 0;
								}
								else{
									res = CC_NATIVE_IMPORT(pos, _context);
									context.reduced |= _context.reduced;
									_context.reduced = 0;
								}
								if (res >= 0){
									pos += res;
									res = 0;
								}
								if (res < 0){ pos = stack_1342; }
								if (res >= 0){
									pos += res;
									res = 0;
								}
								else{
									int stack_1343 = pos;
									if ((lexget(pos).checkid(ID_CC_PACKAGE))){
										pos += lexget(pos).tokenlength;
										res = 0;
									}
									else{
										res = CC_PACKAGE(pos, _context);
										context.reduced |= _context.reduced;
										_context.reduced = 0;
									}
									if (res >= 0){
										pos += res;
										res = 0;
									}
									if (res < 0){ pos = stack_1343; }
									if (res >= 0){
										pos += res;
										res = 0;
									}
									else{
										int stack_1344 = pos;
										if ((lexget(pos).checkid(ID_CC_DEF_VARIABLE_STATE))){
											pos += lexget(pos).tokenlength;
											res = 0;
										}
										else{
											res = CC_DEF_VARIABLE_STATE(pos, _context);
											context.reduced |= _context.reduced;
											_context.reduced = 0;
										}
										if (res >= 0){
											pos += res;
											res = 0;
										}
										if (res < 0){ pos = stack_1344; }
										if (res >= 0){
											pos += res;
											res = 0;
										}
										else{
											int stack_1345 = pos;
											if ((lexget(pos).checkid(ID_CC_CLASS))){
												pos += lexget(pos).tokenlength;
												res = 0;
											}
											else{
												res = CC_CLASS(pos, _context);
												context.reduced |= _context.reduced;
												_context.reduced = 0;
											}
											if (res >= 0){
												pos += res;
												res = 0;
											}
											if (res < 0){ pos = stack_1345; }
											if (res >= 0){
												pos += res;
												res = 0;
											}
											else{
												int stack_1346 = pos;
												if ((lexget(pos).checkid(ID_CC_INTERFACE))){
													pos += lexget(pos).tokenlength;
													res = 0;
												}
												else{
													res = CC_INTERFACE(pos, _context);
													context.reduced |= _context.reduced;
													_context.reduced = 0;
												}
												if (res >= 0){
													pos += res;
													res = 0;
												}
												if (res < 0){ pos = stack_1346; }
												if (res >= 0){
													pos += res;
													res = 0;
												}
												else{
													int stack_1347 = pos;
													int stack_1348 = pos;
													if ((lexget(pos).checkid(ID_CC_OBJECT))){
														pos += lexget(pos).tokenlength;
														res = 0;
													}
													else{
														res = CC_OBJECT(pos, _context);
														context.reduced |= _context.reduced;
														_context.reduced = 0;
													}
													if (res >= 0){
														pos += res;
														res = 0;
													}
													if (res < 0){ pos = stack_1348; }
													if (res >= 0){ 
														int stack_1350 = pos;
														if ((lexget(pos).checkid(ID_CC_LE))){
															pos += lexget(pos).tokenlength;
															res = 0;
														}
														else
														{res = -1;setRecord(ret, pos, ID_CC_GLOBAL, ID_CC_LE);}
														if (res < 0){ pos = stack_1350; }
													}
													if (res < 0){ pos = stack_1347; }
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		
		lexget(ret).unlockfunction(ID_CC_GLOBAL);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_GLOBAL(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_GLOBAL)) > 0){
			res = CC_GLOBAL(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	

//	scan	
	 int CC_SCAN(int pos, CCContext context){
		if (lexget(pos).lockfunction(ID_CC_SCAN) == false){ return -1; }
		int ret = pos, res = 0; CCContext _context = new CCContext(pos);
		
		int stack_1352 = pos;
		if ((lexget(pos).checkid(ID_CC_GLOBAL))){
			pos += lexget(pos).tokenlength;
			res = 0;
		}
		else{
			res = CC_GLOBAL(pos, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
		}
		if (res >= 0){
			pos += res;
			res = 0;
		}
		if (res < 0){ pos = stack_1352; }
		
		lexget(ret).unlockfunction(ID_CC_SCAN);
		if (res < 0){
			if ((context.reduced > 0)){ lexget(ret).resetroute(); return CC_SCAN(ret, _context);}
			return res; 
		}
		_context.pos = pos;
		if ((context.reduced |= ccparseout(ret, _context, pos - ret, ID_CC_SCAN)) > 0){
			res = CC_SCAN(ret, _context);
			context.reduced |= _context.reduced;
			_context.reduced = 0;
			if (res > 0){
				_context.pos = ret + res;
			}
		}
		return _context.pos - ret;
	}
	
	
	 bool parse(){
		CCContext context = new CCContext(0);
		int res = CC_SCAN(0, context);
	
		if (bStop || (res != 1 || weight != 0)){
			if (_listener != nilptr){
				_listener.OnParseError(currentsrc);
			}
			return false;
		}
		return true;
	}
};
