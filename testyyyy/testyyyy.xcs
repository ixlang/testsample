//xlang 



int k = 0;

int fuck1(){
	return k++;
}
int fuck2(){
	return k++;
}
int fuck3(){
	return k++;
}
int fuck4(){
	return k++;
}


class Integer{

	int ok;
	public Integer(){
		ok = 0;
	}
	public Integer(int i){
		ok = i;
	}
	public @NotNilptr Integer  operator +(@NotNilptr Integer  o){
		_system_.consoleWrite(String.format("%d + %d\n", ok, o.ok));
		return new Integer(ok + o.ok);
	}
	public @NotNilptr Integer  operator -(@NotNilptr  Integer  o){
		_system_.consoleWrite(String.format("%d - %d\n", ok, o.ok));
		return new Integer(ok - o.ok);
	}
	public @NotNilptr Integer  operator *(@NotNilptr Integer  o){
		_system_.consoleWrite(String.format("%d * %d\n", ok, o.ok));
		return new Integer(ok * o.ok);
	}
	public @NotNilptr Integer  operator /(@NotNilptr  Integer  o){
		_system_.consoleWrite(String.format("%d / %d\n", ok, o.ok));
		return new Integer(ok / o.ok);
	}
};

int oi = 0;
@NotNilptr Integer geti1(){
	return new Integer(oi++);
}

@NotNilptr Integer geti2(){
	return new Integer(oi++);
}

@NotNilptr Integer geti3(){
	return new Integer(oi++);
}

@NotNilptr Integer geti4(){
	return new Integer(oi++);
}

int main(String [] args){
	_system_.createConsole();
    
	Integer r = geti1() - geti2() - geti3() * geti4();
	String kl =  "" + fuck1() + ""  + fuck2()  + ""  + fuck3()  + ""  +  fuck4() + "" ;
    
    if (kl.equals("0123") == false){
		throw new IllegalArgumentException("结合顺序错误");
    }
	return 0;
}
